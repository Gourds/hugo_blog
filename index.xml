<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gourds</title>
    <link>http://blog.gourds.site/</link>
    <description>Recent content on Gourds</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Sep 2019 20:38:24 +0000</lastBuildDate>
    
        <atom:link href="http://blog.gourds.site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于对Python面向对象的理解</title>
      <link>http://blog.gourds.site/post/%E5%85%B3%E4%BA%8E%E5%AF%B9python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 10 Sep 2019 20:38:24 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E5%85%B3%E4%BA%8E%E5%AF%B9python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      
        <description>&lt;p&gt;说起面向对象(Object Oriented Programming)首先想到的就是三个词：封装、继承和多态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装：&lt;/strong&gt; 目的是为了简化编程和提升安全性(标识出允许外部使用的所有成员函数和数据项)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性封装&lt;/li&gt;
&lt;li&gt;方法封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;继承和多态：&lt;/strong&gt; 顾名思义，继承就是子类可以获取父类的特性，实际上就是为了更好的进行代码复用，而多态是指基于不同的父类调用同一方法也可能有不同的执行逻辑，与这个相关的还有一个有趣的名词”&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B&#34;&gt;鸭子模型&lt;/a&gt;“。&lt;/p&gt;
&lt;p&gt;另外与面向对象对应的还有个面向过程(Process Oriented)。其中的区别下面有一个通俗的解释，可以做一个参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面向对象是相对于面向过程的，比如你要充话费，你会想，可以下个支付宝，然后绑定银行卡，然后在淘宝上买卡，自己冲，这种种过程。但是对于你女朋友就不一样了，她是面向“对象”的，她会想，谁会充话费呢？当然是你了，她就给你电话，然后你把之前的做了一遍，然后她收到到帐的短信，说了句，亲爱的。这就是面向对象！女的思维大部分是面向“对象”的！她不关心处理的细节，只关心谁可以，和结果！&lt;/p&gt;
&lt;p&gt;来源：知乎 &lt;a href=&#34;https://www.zhihu.com/question/31021366/answer/50581592&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;python中的面向对象&#34;&gt;Python中的面向对象&lt;/h3&gt;
&lt;p&gt;在python中类的创建有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用class创建&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Foo&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test&lt;/span&gt;(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Gourds class&amp;#39;&lt;/span&gt;)
a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Foo()
print(a1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;test())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用type创建&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;a1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; type(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Foo&amp;#39;&lt;/span&gt;,(object,),{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;:fun1})
print(a1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;test())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面两种其实并没有什么不同，为的是说一下跟type相关的有一个叫metaclass的东西
创建class后
当将class对象实例化的时候，默认会先执行对象的__new__方法，然后执行对象的__init__方法&lt;/p&gt;
&lt;h3 id=&#34;推荐&#34;&gt;推荐&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-object-class.html&#34;&gt;Python中的面向对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2012/04/functional_programming.html&#34;&gt;函数是编程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>python中特殊方法和特殊变量总结</title>
      <link>http://blog.gourds.site/post/python%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 01 Sep 2019 10:59:29 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/python%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;p&gt;在研究一些python项目的源码时经常会看到一些特殊的方法和变量，比如两边双下划线&lt;code&gt;__init__&lt;/code&gt;定义的方法，还有一些类中会有以双下划线&lt;code&gt;__&lt;/code&gt;开头定义的变量，以及以单下划线&lt;code&gt;_&lt;/code&gt;开头的定义的变量。这里对目前经常遇到的做一个记录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__method__&lt;/code&gt;:在class中有一些以双下划线开头和结尾的函数被称为特殊方法(Magic Method)，更具体可以参考&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#special-method-names&#34;&gt; 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺便说一下访问限制。如下（限制其实并不严格，主要靠自觉）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__&lt;/code&gt;:在类内部如果使用双下划线开头定义变量，那么这个变量就变成了私有变量（private），即这个变量只有在内部访问（并不是绝对控制，可以通过其他方法访问）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;:在类内部如果使用_开头定义变量，其实表示建议（表示可以从外部访问但最好不要访问）当成私有变量&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;特殊方法magic-method&#34;&gt;特殊方法(Magic Method)&lt;/h3&gt;
&lt;p&gt;常用的内置方法简述如下&lt;/p&gt;
&lt;h4 id=&#34;object__new__cls-&#34;&gt;&lt;code&gt;object.__new__(cls[, ...])&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__new__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__new__&lt;/code&gt;是一个静态方法用于创建对象并返回对象，当返回对象时会自动调用&lt;code&gt;__init__&lt;/code&gt;进行初始化。第一个参数是cls表示对象本身，其实self就是&lt;code&gt;__new__&lt;/code&gt;方法的返回值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__init__self-&#34;&gt;&lt;code&gt;object.__init__(self[, ...])&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__init__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;创建实例后由&lt;code&gt;__new__()&lt;/code&gt;调用，但在返回给调用方之前调用。用于初始化实例，其中self表示实例本身&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__str__self&#34;&gt;&lt;code&gt;object.__str__(self)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__str__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;当使用内置函数print()或format()时被调用，返回值只能是str.&lt;code&gt;__str__&lt;/code&gt; 方法默认调用了 &lt;code&gt;__repr__&lt;/code&gt;方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__dir__self&#34;&gt;&lt;code&gt;object.__dir__(self)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__dir__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用于列出该对象内部的所有属性（包括方法）名，该方法将会返回包含所有属性（方法）名的序列。被dir(object)调用，调用会将序列返回为一个经过排序的列表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__call__self-args&#34;&gt;&lt;code&gt;object.__call__(self[, args...])&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将一个类实例要变成一个可调用对象，当实例被调用时触发。x() = &lt;code&gt;x.__call__() &lt;/code&gt;
例子：flask源码请求入口、django源码请求入口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__repr__self&#34;&gt;&lt;code&gt;object.__repr__(self)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__repr__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;跟&lt;code&gt;__str__&lt;/code&gt;方法类似&lt;code&gt;__repr__&lt;/code&gt;它们都是一个“自我描述”的方法，不过repr偏向于程序员调试(应该更多的表示出一个对象来源的类以及继承关系)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__setattr__self-name-value&#34;&gt;&lt;code&gt;object.__setattr__(self, name, value)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__setattr__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;试图分配属性时调用。这被调用而不是正常机制(即，将值存储在实例字典中)。name是属性名，value是要分配给它的值。app.abc = &amp;lsquo;mvalue&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__getattr__self-name&#34;&gt;&lt;code&gt;object.__getattr__(self, name)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__getattr__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果name被访问，同时它不存在的时候，此方法被调用。app.abc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;object__delattr__self-name&#34;&gt;&lt;code&gt;object.__delattr__(self, name)&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__delattr__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果要删除name，这个方法就被调用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;__setitem__&#34;&gt;&lt;code&gt;__setitem__&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__setitem__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;设置给定键的值。app[&amp;lsquo;abc&amp;rsquo;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;__getitem__&#34;&gt;&lt;code&gt;__getitem__&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__getitem__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;返回键对应的值。app[&amp;lsquo;abc&amp;rsquo;] = &amp;lsquo;mvalue&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;__delitem__&#34;&gt;&lt;code&gt;__delitem__&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#object.__delitem__&#34;&gt;Python3官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;删除给定键对应的元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;特殊属性&#34;&gt;特殊属性&lt;/h3&gt;
&lt;h4 id=&#34;__name__&#34;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;如果当前程序运行在当前模块中，那么&lt;code&gt;__name__&lt;/code&gt;就是&lt;code&gt;__main__&lt;/code&gt;,如果是被调用，这个模块中的&lt;code&gt;__name__&lt;/code&gt;就是模块名&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gourds&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Py name is &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; __name__)
gourds()
&lt;span style=&#34;color:#75715e&#34;&gt;#文件file1一内直接执行 结果是Py name is __main__&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; file1
file1&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;gourds()
&lt;span style=&#34;color:#75715e&#34;&gt;#调用执行，结果是Py name is file1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;__all__&#34;&gt;&lt;code&gt;__all__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;如果一个模块定义了&lt;code&gt;__all__&lt;/code&gt;属性,则当被导入时，只有&lt;code&gt;__all__&lt;/code&gt;内指定的属性、方法、类可被导入&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;__all__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cls_test_1&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fun_test_2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cls_test_1&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cls_test_1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cls_test_2&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self):
        print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;cls_test_2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun_test_1&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fun_test_1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fun_test_2&lt;/span&gt;():
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fun_test_2&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如上，如果通过from调用上面的模块，则只有&lt;code&gt;__all__&lt;/code&gt;里面定义的方法和类可以使用。如果使用其他未允许的，就会触发&lt;code&gt;NameError: name &#39;xxx&#39; is not defined&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;__slots__&#34;&gt;&lt;code&gt;__slots__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;跟&lt;code&gt;__all__&lt;/code&gt;不同，&lt;code&gt;__slots__&lt;/code&gt;可以用来限制类中实例的属性（这个限制只能限制当前类的实例，对子类没有影响）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_slots&lt;/span&gt;():
    __slots__ &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ta&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tb&amp;#39;&lt;/span&gt;)

x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; test_slots()
x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ta &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mta&amp;#39;&lt;/span&gt;
x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;mtb&amp;#39;&lt;/span&gt;
print(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ta)
print(x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tb)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果视图设置不被允许的属性如&lt;code&gt;x.tc&lt;/code&gt;,就会抛出&lt;code&gt;AttributeError: &#39;test_slots&#39; object has no attribute &#39;tc&#39;&lt;/code&gt;,这个在Flask源码中的local对象有使用&lt;/p&gt;
&lt;h4 id=&#34;__mro__&#34;&gt;&lt;code&gt;__mro__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Python中每一个有父类的类都有这个属性，值是一个tuble。表示方法解析时的对象查找顺序: 越靠前的优先级越高&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;gourds&lt;/span&gt;(object):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;
print(gourds&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__mro__) &lt;span style=&#34;color:#75715e&#34;&gt;#(&amp;lt;class &amp;#39;__main__.gourds&amp;#39;&amp;gt;, &amp;lt;class &amp;#39;object&amp;#39;&amp;gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;扩展问题&#34;&gt;扩展问题&lt;/h3&gt;
&lt;h4 id=&#34;1-什么是方法什么是函数&#34;&gt;1. 什么是方法什么是函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;先扔下概念&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt; —— A series of statements which returns some value toa caller. It can also be passed zero or more arguments which may beused in the execution of the body&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;method&lt;/strong&gt; —— A function which is defined inside a class body. Ifcalled as an attribute of an instance of that class, the methodwill get the instance object as its first argument (which isusually called self)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;函数是Python中的可调用对象，即可以使用call运算符调用&lt;/li&gt;
&lt;li&gt;方法是类中的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-函数调用时加括号和不加括号的区别&#34;&gt;2. 函数调用时加括号和不加括号的区别&lt;/h4&gt;
&lt;p&gt;不加括号表示调用函数本身，加括号就表示调用函数执行结果&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;

print(foo) &lt;span style=&#34;color:#75715e&#34;&gt;#&amp;lt;function foo at 0x101fcee18&amp;gt;&lt;/span&gt;
print(foo()) &lt;span style=&#34;color:#75715e&#34;&gt;#hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-super函数和mro方法的区别&#34;&gt;3. super函数和mro方法的区别&lt;/h4&gt;
&lt;p&gt;super原理：通过mro()方法获取到实例的方法解析顺序，在mro顺序中返回当前类的下一个类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;具体可以参考&lt;a href=&#34;http://py.defcoding.com/chapter-3/mro.html&#34;&gt;MRO 和 super&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
      
    </item>
    
    <item>
      <title>JenkinsActiveChoices插件使用</title>
      <link>http://blog.gourds.site/post/jenkins%E7%9A%84activechoices%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Aug 2019 08:30:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/jenkins%E7%9A%84activechoices%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</guid>
      
        <description>&lt;p&gt;之前使用过Jenkins的&lt;a href=&#34;https://wiki.jenkins.io/display/JENKINS/Active+Choices+Plugin&#34;&gt;Active Choices Plugin&lt;/a&gt;插件，概述下当时我想实现的效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对自定义选项支持多选&lt;/li&gt;
&lt;li&gt;在Job中点击构建是默认全部选中&lt;/li&gt;
&lt;li&gt;采用DSL构建
所以当时调研后就选择了这个插件，使用起来还不错。不过今天又遇到一个问题，记录一下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现效果如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/30/20190830-jenkins-1.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Jenkins上&lt;code&gt;Test_Choices1&lt;/code&gt;的配置如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/30/20190830-jenkins-2.jpg&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Test_choices2&lt;/code&gt;跟1的区别在于点击进去默认是全选的，关于选中状态，主要区别是&lt;code&gt;:selected&lt;/code&gt;,具体可以参照上面插件的wiki链接。
wiki2就写一个Groovy的写法不截图了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-groovyScript&#34; data-lang=&#34;groovyScript&#34;&gt;activeChoiceParam(&#39;Test_choices2&#39;) {
    description(&#39;描述&#39;)
    //filterable()
    choiceType(&#39;MULTI_SELECT&#39;)
    groovyScript {
        script(&#39;&#39;&#39;\
        return [
                &#39;C1&#39;,
                &#39;C2&#39;,
                &#39;C3&#39;,
                &#39;C4&#39;,
                &#39;C5&#39;
               ].collect { &amp;quot;$it:selected&amp;quot; }
            &#39;&#39;&#39;.stripIndent())
        //fallbackScript(&#39;&amp;quot;fallback choice&amp;quot;&#39;)
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样需求就解决了，最近发现的问题是如果使用cron触发任务，默认选择的就不生效了。目前是个ISSUE，具体信息可以追踪&lt;a href=&#34;https://issues.jenkins-ci.org/browse/JENKINS-42568&#34;&gt; JENKINS-42568&lt;/a&gt;
有好的解决方案再来这更新，不赘述了&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Flask中Jinja2模板使用总结</title>
      <link>http://blog.gourds.site/post/flask%E4%B8%ADjinja2%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 28 Aug 2019 21:00:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/flask%E4%B8%ADjinja2%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      
        <description>&lt;p&gt;之前&lt;a href=&#34;&#34;&gt;已经总结过Jinja2&lt;/a&gt;了,这里主要总结在Falsk中的一些东西。包括以下方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板的目录结构设计&lt;/li&gt;
&lt;li&gt;常用的模块&lt;/li&gt;
&lt;li&gt;HTML转义&lt;/li&gt;
&lt;li&gt;特殊装饰器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;模板的目录设计&#34;&gt;模板的目录设计&lt;/h4&gt;
&lt;p&gt;没有绝对答案，从别人博客复制一个结构又加了一点补充，更详尽的可以参考&lt;a href=&#34;https://blog.csdn.net/xingyunLOST/article/details/77155584&#34;&gt;他的博客&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;| - projectName
	| - app  //程序包
		| - templates //jinjia2模板
      | -  layout.html
      | -  index.html
      | -  about.html
      | -  profile/
           | -  layout.html
           | -  index.html
      | -  photos.html
      |-   admin/
           | - layout.html
           | - index.html
           | - analytics.html
		|- static //css,js 图片等静态文件
		| - main  //py程序包 ，可以有多个这种包，每个对应不同的功能
			| - __init__.py
			|- errors.py
			|- forms.py
			|- views.py
		|- __init__.py
		|- email.py //邮件处理程序
		|- models.py //数据库模型
	|- migrations //数据迁移文件夹
	| - tests  //单元测试
		|- __init__.py
		|- test*.py //单元测试程序，可以包含多个对应不同的功能点测试
	|- venv  //虚拟环境
	|- requirements.txt //列出了所有依赖包以及版本号，方便在其他位置生成相同的虚拟环境以及依赖
	|- config.py //全局配置文件，配置全局变量
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;常用的模块&#34;&gt;常用的模块&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Flask,render_template
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/about&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;about&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;,user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Gourds&amp;#39;&lt;/span&gt;)
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  render_template参数说明：
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  第一个参数是模板名称，默认会在当前路径下的templates中查找
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  user=&amp;#39;Gourds&amp;#39;,其中左边data1表示模板中的占位符，右边表示在当前视图中的变量
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如下就是HTML的例子(定义user返回hello不然返回gun)。变量表达式使用&lt;code&gt;&amp;amp;#123;&amp;amp;#123; &amp;amp;#125;&amp;amp;#125;&lt;/code&gt;，控制语句使用&lt;code&gt;&amp;amp;#123;% %&amp;amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;Gourds&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;amp;#123;% if user is defined() %&amp;amp;#125;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt; Hello &amp;amp;#123;&amp;amp;#123; user &amp;amp;#125;&amp;amp;#125; !&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
    &amp;amp;#123;% else %&amp;amp;#125;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt; Gun !&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
    &amp;amp;#123;% endif %&amp;amp;#125;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;html自动转义&#34;&gt;HTML自动转义&lt;/h4&gt;
&lt;p&gt;jinja2默认情况下实惠自动转义的。如下,会被自动转义&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt; Welcome &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;em&amp;gt;Gourds&amp;lt;em&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过有时候你可能就是想让输出这个，在Flask中可以使用&lt;code&gt;Marup&lt;/code&gt;实现&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; flask &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; Markup
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/index&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;index&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Markup(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;h1&amp;gt; Welcome &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;lt;/h1&amp;gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;em&amp;gt;Gourds&amp;lt;em&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;自动转义的原因&lt;/strong&gt;
原因：被渲染到页面的对象中没有实现&lt;code&gt;__html__&lt;/code&gt;方法的对象。换句话说,就是假设一个对象实现了&lt;code&gt;__html__&lt;/code&gt;方法那么这个对象就是安全的,jinja2模板就不会将它转义,即使他就是个恶意的脚本，那么为了防止被恶意脚本攻击,jinja2模板默认开启了自动转义,频繁的自动转义是会大量的消耗资源的,所以在确定该数据是安全的情况下可以用过滤器&lt;code&gt;|safe&lt;/code&gt;或者&lt;code&gt;&amp;amp;#123;% autoescape false %&amp;amp;#125;&amp;amp;#123;% endautoescape %&amp;amp;#125;&lt;/code&gt;关闭转义环境&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;safe过滤器：
过滤器safe在源码中是将对象转换成一个&lt;code&gt;Mark_up&lt;/code&gt;类的对象并实现了&lt;code&gt;__html__&lt;/code&gt;方法，所以数据对象就被标记为安全然后渲染到前端&lt;/li&gt;
&lt;li&gt;autoescape：
将对象处于一个没有转义的环境下直接渲染到前端，跟&lt;code&gt;__html__&lt;/code&gt;没有关系&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;模板继承include宏&#34;&gt;模板继承&amp;amp;include&amp;amp;宏&lt;/h4&gt;
&lt;p&gt;之前在jinja语法中写过了，在这就简单记下&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;模板继承&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;&amp;amp;#123; extends &amp;#34;layout.html&amp;#34; &amp;amp;#125;&amp;amp;#125;
&amp;amp;#123;&amp;amp;#123; block content &amp;amp;#125;&amp;amp;#125;
    &amp;amp;#123;&amp;amp;#123; var1 &amp;amp;#125;&amp;amp;#125;
    &amp;amp;#123;&amp;amp;#123; fun(a,b)&amp;amp;#125;&amp;amp;#125;
&amp;amp;#123;&amp;amp;#123; endblock &amp;amp;#125;&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;include模板&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;包含的模板会被传递到当前的上下文，使用&lt;code&gt;import&lt;/code&gt;的话就不会。导入不会像包含被缓存，因为导入经常只作为容纳宏的模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% include &amp;#39;header.html&amp;#39; without context %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;宏&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;宏其实就类似程序中的function，用来替代重复性操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 定义 --&amp;gt;&lt;/span&gt;
&amp;amp;#123;% macro input(name, value=&amp;#39;&amp;#39;, type=&amp;#39;text&amp;#39;, size=20) -%&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; type &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; name &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        value|e &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; size &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endmacro %&amp;amp;#125;
&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 使用 --&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input(&amp;#39;username&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input(&amp;#39;password&amp;#39;, type=&amp;#39;password&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;两个特殊装饰器&#34;&gt;两个特殊装饰器&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;@app.template_globle&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个装饰器可以使所有的模板都可以直接调用被装饰的函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;template_global()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hi&lt;/span&gt;(x, y):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; str(x) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str(y)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; hi(&amp;#39;hello&amp;#39;, &amp;#39;world&amp;#39;)&amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;@app.template_filter&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个装饰器下的函数可以方便测试表达式,比如IF判断&lt;code&gt;&amp;amp;#123;&amp;amp;#123; if a|fun(b,c) &amp;amp;#125;&amp;amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;template_filter()
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hello&lt;/span&gt;(a, b, c):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; 1|hello(2, 3) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Jinja2语法</title>
      <link>http://blog.gourds.site/post/jinja2%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Aug 2019 21:00:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/jinja2%E8%AF%AD%E6%B3%95/</guid>
      
        <description>&lt;h4 id=&#34;介绍&#34;&gt;介绍&lt;/h4&gt;
&lt;p&gt;大概介绍一下，主要介绍模板（模板仅仅是文本文件。它可以生成任何基于文本的格式（HTML、XML、CSV、LaTex 等等）。它并没有特定的扩展名，&lt;code&gt;.html&lt;/code&gt;或&lt;code&gt;.xml&lt;/code&gt;都是可以的。）模板包含变量或表达式 ，这两者在模板求值的时候会被替换为值。模板中 还有标签，控制模板的逻辑。模板语法的大量灵感来自于 Django和Python。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jinja2是一个现代的，设计者友好的，仿照Django模板的Python模板语言。它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全.特征如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;沙箱中执行&lt;/li&gt;
&lt;li&gt;强大的HTML自动转义系统保护系统免受XSS&lt;/li&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;li&gt;及时编译最优的python代码&lt;/li&gt;
&lt;li&gt;易于调试。异常的行数直接指向模板中的对应行&lt;/li&gt;
&lt;li&gt;可配置的语法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash;选自 &lt;a href=&#34;http://docs.jinkan.org/docs/jinja2/index.html&#34;&gt;http://docs.jinkan.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Jinja2需要至少Python2.4版本来运行&lt;/li&gt;
&lt;li&gt;使用的时候推荐&lt;code&gt;# -*- coding: utf-8 -*-&lt;/code&gt;。
Jinja2内部使用Unicode ，这意味着你需要向渲染函数传递 Unicode 对象或只包含 ASCII 字符的字符串。此外，换行符按照默认 UNIX 风格规定行序列结束（ \n ）&lt;/li&gt;
&lt;li&gt;从Jinja2 2.4版本开始支持自动转义(autoescape参数)。&lt;a href=&#34;http://docs.jinkan.org/docs/jinja2/extensions.html#autoescape-extension&#34;&gt;自动转义&lt;/a&gt;扩展允许你在模板内开关自动转义特性。如果环境的 autoescape 设定为 False ，它可以被激活。如果是 True 可以被关闭。这个设定的覆盖是有作用域的。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash;选自 &lt;a href=&#34;https://www.w3cschool.cn/yshfid/&#34;&gt;W3Cschool Jinja2文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;模板变量-及-过滤器&#34;&gt;模板（变量 及 过滤器）&lt;/h3&gt;
&lt;h4 id=&#34;变量&#34;&gt;变量&lt;/h4&gt;
&lt;p&gt;变量可以有两种形式，但实际不太一样，另外注意&lt;code&gt;&amp;amp;#123;&amp;amp;#123; &amp;amp;#125;&amp;amp;#125;&lt;/code&gt;不是变量的一部分，而是打印语句的一部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;#123;&amp;amp;#123; foo.bar &amp;amp;#125;&amp;amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用foo.bar实际在python层面做了以下事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查foo上是否有一个名为bar的属性&lt;/li&gt;
&lt;li&gt;若没有，检查foo中是否有一个bar的项&lt;/li&gt;
&lt;li&gt;若没有，返回一个未定义的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;#123;&amp;amp;#123; foo[&#39;bar&#39;] &amp;amp;#125;&amp;amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;-使用foo[&amp;lsquo;bar&amp;rsquo;]如下
-检查foo中是否有一个名为bar的项
-若没有，检查foo中是否有一个名为bar的属性
-若没有，返回一个未定义的对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;变量赋值&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% set navigation = [(&amp;#39;index.html&amp;#39;, &amp;#39;Index&amp;#39;), (&amp;#39;about.html&amp;#39;, &amp;#39;About&amp;#39;)] %&amp;amp;#125;
&amp;amp;#123;% set key, value = call_something() %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;过滤器&#34;&gt;过滤器&lt;/h4&gt;
&lt;p&gt;变量可以通过过滤器修改。过滤器与变量用管道符&lt;code&gt;|&lt;/code&gt;分割，并且也可以用圆括号传递可选参数。多个过滤器可以链式调用
常见的内置过滤器如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;abs(number)  &lt;span style=&#34;color:#75715e&#34;&gt;#取绝对值&lt;/span&gt;
attr(obj, name) &lt;span style=&#34;color:#75715e&#34;&gt;#获得对象属性&lt;/span&gt;
batch(value, linecount, fill_with&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#批处理项目的过滤器，类似切片&lt;/span&gt;
capitalize(s) &lt;span style=&#34;color:#75715e&#34;&gt;#将第一个字母大写其余小写&lt;/span&gt;
center(value, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将值的宽度增加到指定值&lt;/span&gt;
default(value, default_value&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, boolean&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#如果值未定义就设置为默认值，如果要对布尔值使用boolean参数需要为True&lt;/span&gt;
dictsort(value, case_sensitive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, by&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#对字典进行排序&lt;/span&gt;
escape(s) &lt;span style=&#34;color:#75715e&#34;&gt;#将字符串中的字符&amp;amp;、&amp;#39;、和&amp;#39;转换为安全的序列。如果您需要在HTML中显示可能包含此类字符的文本，请使用此选项。将返回值标记为标记字符串。&lt;/span&gt;
filesizeformat(value, binary&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将文件大小格式转化为便于阅读的格式,如MB，G&lt;/span&gt;
first(seq) &lt;span style=&#34;color:#75715e&#34;&gt;#返回序列中的第一个，字符串列表都可以，字符串如果包括,会以,分割，列表直接拿第一项&lt;/span&gt;
float(value, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将输入转换成浮点数，转换失败就返回默认值&lt;/span&gt;
forceescape(value) &lt;span style=&#34;color:#75715e&#34;&gt;#强制HTML转义。这可能会使转义变量翻倍&lt;/span&gt;
format(value, args, kwargs&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#给对象应用python字符串格式，如value=&amp;#34;%s - %s&amp;#34;&lt;/span&gt;
groupby(value, attribute) &lt;span style=&#34;color:#75715e&#34;&gt;#使用公共属性将对象序列分组&lt;/span&gt;
indent(s, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, indentfirst&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#返回传递字符串的副本，每行缩进4个空格。第一行没有缩进。如果您想更改空格数或缩进第一行，可以向筛选器传递其他参数&lt;/span&gt;
int(value, default&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将输入转换成整数，转换失败就返回默认值&lt;/span&gt;
join(value, d&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, attribute&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将列表拼接，也可以连接对象的某些属性&lt;/span&gt;
last(seq) &lt;span style=&#34;color:#75715e&#34;&gt;#返回序列中的最后一个&lt;/span&gt;
length(object) &lt;span style=&#34;color:#75715e&#34;&gt;#返回序列或映射的项数，最简单可以看str的长度，已经列表的元素数&lt;/span&gt;
list(value) &lt;span style=&#34;color:#75715e&#34;&gt;#将值转化为列表&lt;/span&gt;
lower(s) &lt;span style=&#34;color:#75715e&#34;&gt;#将值转化为小写&lt;/span&gt;
map() &lt;span style=&#34;color:#75715e&#34;&gt;#映射属性，对对象序列应用过滤器或查找属性，如&amp;amp;#123;&amp;amp;#123; titles|map(&amp;#39;lower&amp;#39;)|join(&amp;#39;, &amp;#39;) &amp;amp;#125;&amp;amp;#125;&lt;/span&gt;
pprint(value, verbose&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#方便调试，美观的打印&lt;/span&gt;
random(seq) &lt;span style=&#34;color:#75715e&#34;&gt;#从序列中返回随机项目&lt;/span&gt;
reject() &lt;span style=&#34;color:#75715e&#34;&gt;#通过将测试应用于对象或属性，并在测试成功后拒绝这些对象来过滤对象序列。&lt;/span&gt;
rejectattr() &lt;span style=&#34;color:#75715e&#34;&gt;#通过将测试应用于对象或属性，并在测试成功后拒绝这些对象来过滤对象序列。&lt;/span&gt;
replace(s, old, new, count&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#查找替换&lt;/span&gt;
reverse(value) &lt;span style=&#34;color:#75715e&#34;&gt;#反转对象&lt;/span&gt;
round(value, precision&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;common&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将数字舍入到给定的精度。第一个参数指定精度(默认值为0)，第二个参数指定舍入方法&lt;/span&gt;
safe(value) &lt;span style=&#34;color:#75715e&#34;&gt;#将该值标记为安全，这意味着在启用自动转义的环境中，该变量不会被转义。&lt;/span&gt;
select() &lt;span style=&#34;color:#75715e&#34;&gt;#通过将测试应用于对象或属性，并仅选择测试成功的对象，过滤对象序列。&lt;/span&gt;
selectattr() &lt;span style=&#34;color:#75715e&#34;&gt;#通过将测试应用于对象或属性，并仅选择测试成功的对象，过滤对象序列。&lt;/span&gt;
slice(value, slices, fill_with&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#分割迭代器并返回包含这些项目的列表。当创建包含三个表示列的ul标记的div时很有用&lt;/span&gt;
sort(value, reverse&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, case_sensitive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, attribute&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#排序&lt;/span&gt;
string(object) &lt;span style=&#34;color:#75715e&#34;&gt;#创建字符串unicode&lt;/span&gt;
striptags(value) &lt;span style=&#34;color:#75715e&#34;&gt;#去掉SGML/XML标签，用一个空格替换相邻的空格。&lt;/span&gt;
sum(iterable, attribute&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, start&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#返回数字的和，如&amp;amp;#123;&amp;amp;#123; items|sum(attribute=&amp;#39;price&amp;#39;) &amp;amp;#125;&amp;amp;#125;&lt;/span&gt;
title(s) &lt;span style=&#34;color:#75715e&#34;&gt;#返回该值的标题大小写版本。即单词将以大写字母开头，所有剩余字符都是小写的&lt;/span&gt;
trim(value) &lt;span style=&#34;color:#75715e&#34;&gt;#去掉开头和结尾的空格&lt;/span&gt;
truncate(s, length&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;, killwords&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, end&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#截断字符串指定长度&lt;/span&gt;
upper(s) &lt;span style=&#34;color:#75715e&#34;&gt;#将值转为大写&lt;/span&gt;
urlencode(value) &lt;span style=&#34;color:#75715e&#34;&gt;#用于网址的转义字符串(使用UTF-8编码)。既接受字典和常规字符串也接受成对的iterables。&lt;/span&gt;
urlize(value, trim_url_limit&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;, nofollow&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#将纯文本网址转换为可点击&lt;/span&gt;
wordcount(s) &lt;span style=&#34;color:#75715e&#34;&gt;#返回字符串中的单词数&lt;/span&gt;
wordwrap(s, width&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;79&lt;/span&gt;, break_long_words&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, wrapstring&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#返回传递给筛选器的字符串的副本，该字符串在指定个字符后换行&lt;/span&gt;
xmlattr(d, autospace&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;#基于字典中的项目创建一个SGML/XML属性字符串。所有既不是无也不是未定义的值都会自动转义&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;过滤器小栗子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% filter upper %&amp;amp;#125;
    This text becomes uppercase
&amp;amp;#123;% endfilter %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基础语法&#34;&gt;基础语法&lt;/h3&gt;
&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;
&lt;p&gt;测试可以对普通表达式进行测试变量,测试也可以接受参数。如果测试只接受一个参数，你可以省去括号来分组它们&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% if loop.index is divisibleby(3) %&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;内置测试清单&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;callable(object) &lt;span style=&#34;color:#75715e&#34;&gt;#对象是否可调用&lt;/span&gt;
defined(value) &lt;span style=&#34;color:#75715e&#34;&gt;#是否定义&lt;/span&gt;
divisibleby(value, num) &lt;span style=&#34;color:#75715e&#34;&gt;#能否被整除&lt;/span&gt;
escaped(value) &lt;span style=&#34;color:#75715e&#34;&gt;#是否转义&lt;/span&gt;
even(value) &lt;span style=&#34;color:#75715e&#34;&gt;#如果是偶数为true&lt;/span&gt;
iterable(value) &lt;span style=&#34;color:#75715e&#34;&gt;#是否有可迭代对象&lt;/span&gt;
lower(value) &lt;span style=&#34;color:#75715e&#34;&gt;#小写返回true&lt;/span&gt;
mapping(value) &lt;span style=&#34;color:#75715e&#34;&gt;#字典返回true&lt;/span&gt;
none(value) &lt;span style=&#34;color:#75715e&#34;&gt;#空返回true&lt;/span&gt;
number(value) &lt;span style=&#34;color:#75715e&#34;&gt;#数字返回true&lt;/span&gt;
odd(value) &lt;span style=&#34;color:#75715e&#34;&gt;#变量为奇数返回true&lt;/span&gt;
sameas(value, other) &lt;span style=&#34;color:#75715e&#34;&gt;#是否指向相同的内存地址&lt;/span&gt;
sequence(value) &lt;span style=&#34;color:#75715e&#34;&gt;#列表返回true&lt;/span&gt;
string(value) &lt;span style=&#34;color:#75715e&#34;&gt;#字符串返回true&lt;/span&gt;
undefined(value) &lt;span style=&#34;color:#75715e&#34;&gt;#是否未定义&lt;/span&gt;
upper(value) &lt;span style=&#34;color:#75715e&#34;&gt;#大写返回true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注释空白控制转义&#34;&gt;注释&amp;amp;空白控制&amp;amp;转义&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;注释：&lt;/strong&gt; 在模板内进行注释使用&lt;code&gt;&amp;amp;#123;# 要注释的内容 #&amp;amp;#125;&lt;/code&gt;,如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;# note: disabled template example&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% for user in users %&amp;amp;#125;&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% endfor %&amp;amp;#125;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;空白控制&lt;/strong&gt; :默认情况下，模板引擎不会对空白进行修改，如果配置了Jinja的&lt;code&gt;trim_blocks&lt;/code&gt;则模板标签后的第一个换行符会被移除，另外，可以通过在块的开始或结束放置一个减号&lt;code&gt;-&lt;/code&gt;
&lt;strong&gt;注意&lt;/strong&gt;:标签和减号之间不能有空格,可以移除块前或块后的空白.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#demo1: 生成不换行的所有元素&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% for item in seq -%&amp;amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;&amp;amp;#123; item &amp;amp;#125;&amp;amp;#125;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;%- endfor %&amp;amp;#125;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#demo2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;%- if foo -%&amp;amp;#125;...&amp;amp;#123;% endif %&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**转义：**较短的转义可以使用变量表达式，较长的内容或段落可以通过&lt;code&gt;raw&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#demo1&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;&amp;amp;#123; &amp;#39;&amp;amp;#123;&amp;#39; &amp;amp;#125;&amp;amp;#125;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#demo2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% raw %&amp;amp;#125;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% for i in [1,2,3] %&amp;amp;#125;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;&amp;amp;#123; i &amp;amp;#125;&amp;amp;#125;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% endfor %&amp;amp;#125;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#123;% endraw %&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;扩展：
当从模板生成 HTML 时，始终有这样的风险:变量包含影响已生成 HTML 的字符。有两种 解决方法:手动转义每个字符或默认自动转义所有的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用手动转义: 转义通过用管道传递到过滤器 |e 来实现: {{ user.username|e }} 。&lt;/li&gt;
&lt;li&gt;使用自动转义: 当启用了自动转移，默认会转移一切，除非值被显式地标记为安全的&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;行语句&#34;&gt;行语句&lt;/h4&gt;
&lt;p&gt;如果配置启用行语句，就可以把一个行标记为一个句子。例如如果行语句前缀配置为&#39;#&#39;，那么&lt;code&gt;#for item in [1,2,3]&lt;/code&gt;和&lt;code&gt;&amp;amp;#123;% for item in [1,2,3] %&amp;amp;#125;&lt;/code&gt;就是等效的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;行语句可以出现在一行的任意位置，只要它的前面没有文本，提升可读性&lt;/li&gt;
&lt;li&gt;如果有未闭合的圆括号、花括号或方括号，那么行语句可以跨越多行&lt;/li&gt;
&lt;li&gt;从Jinja2.2版本开始，行注释可以使用了，例如如果配置&lt;code&gt;##&lt;/code&gt;为行注释前缀，行中所有&lt;code&gt;##&lt;/code&gt;后面的内容都会被忽略（不包括换行符）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模板继承包含&#34;&gt;模板继承&amp;amp;包含&lt;/h3&gt;
&lt;p&gt;模板继承可以说是Jinja最强大的部分了，模板继承允许定义一个基础模板，然后定义子模板可以覆盖的块。如下例子&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基础模板&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
    &amp;amp;#123;% block head %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;&amp;amp;#123;% block title %&amp;amp;#125;&amp;amp;#123;% endblock %&amp;amp;#125; - My Webpage&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&amp;gt;
    &amp;amp;#123;% endblock %&amp;amp;#125;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;&amp;amp;#123;% block content %&amp;amp;#125;&amp;amp;#123;% endblock %&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;footer&amp;#34;&lt;/span&gt;&amp;gt;
        &amp;amp;#123;% block footer %&amp;amp;#125;
        &amp;amp;copy; Copyright 2008 by &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://gourds.site/&amp;#34;&lt;/span&gt;&amp;gt;Gourds&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;.
        &amp;amp;#123;% endblock %&amp;amp;#125;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;子模板s1&lt;/strong&gt;
&lt;code&gt;&amp;amp;#123;% extends%&amp;amp;#125;&lt;/code&gt;标签确定继承的模板，也可以访问多级目录下的模板&lt;code&gt;&amp;amp;#123;% extends &amp;quot;path_to/my_template.html&amp;quot; %&amp;amp;#125;&lt;/code&gt;。使用&lt;code&gt;super()&lt;/code&gt;可以调用super来渲染父级块的内容，会返回父级块的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% extends &amp;#34;base.html&amp;#34; %&amp;amp;#125;
&amp;amp;#123;% block title %&amp;amp;#125;Index&amp;amp;#123;% endblock %&amp;amp;#125;
&amp;amp;#123;% block head %&amp;amp;#125;
    &amp;amp;#123;&amp;amp;#123; super() &amp;amp;#125;&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt;&amp;gt;
        .&lt;span style=&#34;color:#a6e22e&#34;&gt;important&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;#123&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; #336699&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;#125&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;style&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endblock %&amp;amp;#125;
&amp;amp;#123;% block content %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;Index Test &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;important&amp;#34;&lt;/span&gt;&amp;gt;
      Gourds test page s1.
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endblock %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;推荐使用命名块结束标签提升可读性(&lt;code&gt;endblock&lt;/code&gt;后面写的要与&lt;code&gt;block&lt;/code&gt;后面的对应),如&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% block my_data %&amp;amp;#125;
  &amp;amp;#123;% block you_data %&amp;amp;#125;
    ...
  &amp;amp;#123;% endblock you_data %&amp;amp;#125;
&amp;amp;#123;% endblock my_data%&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;嵌套块和作用域&lt;/strong&gt;
默认的块不允许访问块外作用域中的变量，嵌套块可以.从Jinja2.2开始，只需在块声明中添加&lt;code&gt;scoped&lt;/code&gt;装饰，就可以显示的指定在块中可用的变量，当覆盖一个块时不需要&lt;code&gt;scoped&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;amp;#123;% for item in seq %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;amp;#123;% block loop_item scoped %&amp;amp;#125;&amp;amp;#123;&amp;amp;#123; item &amp;amp;#125;&amp;amp;#125;&amp;amp;#123;% endblock %&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endfor %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;包含&lt;/strong&gt;
Include语句用于包含一个模板，并在当前命名空间返回文件的渲染结果，包含的模板默认可以访问活动的上下文中的变量&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% include &amp;#39;header.html&amp;#39; %&amp;amp;#125;
    Body
&amp;amp;#123;% include &amp;#39;footer.html&amp;#39; %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;控制结构&#34;&gt;控制结构&lt;/h3&gt;
&lt;h4 id=&#34;for语句&#34;&gt;for语句&lt;/h4&gt;
&lt;p&gt;遍历列表中的每一元素，支持大部分python语法。注意不能在循环中使用&lt;code&gt;break&lt;/code&gt;或&lt;code&gt;continue&lt;/code&gt;.但可以通过过滤来跳过项目，如&lt;code&gt;&amp;amp;#123;% for user in users if not user.hidden %&amp;amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% for k,v in local_data.items() %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;

        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; v[&amp;#39;Name&amp;#39;] &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; v.Age &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; v.Site &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;td&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;tr&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endfor %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果因序列是空或者过滤移除了序列中的所有项目而没有执行循环，你可以使用 else 渲染一个用于替换的块&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;amp;#123;% for user in users %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; user.username|e &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;amp;#123;% else %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt;no users found&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;em&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endfor %&amp;amp;#125;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;递归的使用循环&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sitemap&amp;#34;&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- for item in sitemap recursive %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; item.href|e &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; item.title &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;
    &amp;amp;#123;%- if item.children -%&amp;amp;#125;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;submenu&amp;#34;&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; loop(item.children) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;amp;#123;%- endif %&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endfor %&amp;amp;#125;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在for循环中可用的特殊变量&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;变量名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;loop.index&lt;/td&gt;
&lt;td&gt;当前迭代次数从1开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.index0&lt;/td&gt;
&lt;td&gt;当前迭代次数从0开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.revindex&lt;/td&gt;
&lt;td&gt;到循环结束需要迭代的次数从1开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.revindex0&lt;/td&gt;
&lt;td&gt;到循环结束需要迭代的次数从0开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.first&lt;/td&gt;
&lt;td&gt;如果是第一次迭代为True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.last&lt;/td&gt;
&lt;td&gt;如果是最后一次迭代为True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.length&lt;/td&gt;
&lt;td&gt;列表中的项目数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;loop.cycle&lt;/td&gt;
&lt;td&gt;在表表间期取值的辅助函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;if语句&#34;&gt;if语句&lt;/h4&gt;
&lt;p&gt;跟python中的if差不多，可以使用&lt;code&gt;if、elif、else&lt;/code&gt;，可以测试变量或其他表达式，在jinja中也可以叫做内联表达式或者循环过滤&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% if users %&amp;amp;#125;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;amp;#123;% for user in users %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; user.username|e &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endfor %&amp;amp;#125;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endif %&amp;amp;#125;

&amp;amp;#123;% if kenny.sick %&amp;amp;#125;
    Kenny is sick.
&amp;amp;#123;% elif kenny.dead %&amp;amp;#125;
    You killed Kenny!  You bastard!!!
&amp;amp;#123;% else %&amp;amp;#125;
    Kenny looks okay --- so far
&amp;amp;#123;% endif %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;关于宏&#34;&gt;关于宏&lt;/h4&gt;
&lt;p&gt;类似其他语言，宏用来将重复行为分装成可重用的函数.如果宏在不同模板定义需要先&lt;code&gt;import&lt;/code&gt;，如果一个宏的名称以下划线开始，则它不能导出且不能被导入
宏内部，可以访问的特殊的变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;varargs&lt;/code&gt;：多于宏接受的参数个数的位置参数被传入，它们会作为列表的值保存在 varargs变量上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kwargs&lt;/code&gt;：同varargs，但只针对关键字参数。所有未使用的关键字参数会存储在这个特殊变量中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caller&lt;/code&gt;：如果宏通过call标签调用，调用者会作为可调用的宏被存储在这个变量中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：宏的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arguments&lt;/code&gt;：一个宏接受的参数名的元组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaults&lt;/code&gt;：默认值的元组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;catch_kwargs&lt;/code&gt;：如果宏接受额外的关键字参数，为true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;catch_varargs&lt;/code&gt;：如果宏接受额外的位置参数，为true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;caller&lt;/code&gt;：如果宏访问特殊的caller变量且由call标签调用，为true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下例子，定义宏&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% macro input(name, value=&amp;#39;&amp;#39;, type=&amp;#39;text&amp;#39;, size=20) -%&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; type &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; name &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        value|e &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; size &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endmacro %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用宏&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input(&amp;#39;username&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input(&amp;#39;password&amp;#39;, type=&amp;#39;password&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;带参数调用块的例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% macro dump_users(users) -%&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
    &amp;amp;#123;%- for user in users %&amp;amp;#125;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; user.username|e &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; caller(user) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;li&lt;/span&gt;&amp;gt;
    &amp;amp;#123;%- endfor %&amp;amp;#125;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;ul&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endmacro %&amp;amp;#125;

&amp;amp;#123;% call(user) dump_users(list_of_user) %&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;Realname&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; user.realname|e &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;Description&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; user.description &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
&amp;amp;#123;% endcall %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;表达式&#34;&gt;表达式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;比较&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;==&lt;/code&gt;/&lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and/or/not&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is&lt;/code&gt;/&lt;code&gt;in&lt;/code&gt;/&lt;code&gt;|&lt;/code&gt;(应用过滤器)/&lt;code&gt;()&lt;/code&gt;调用一个可调用对象/
&lt;strong&gt;算数运算&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;典型示例&#34;&gt;典型示例&lt;/h3&gt;
&lt;p&gt;导入模板并使用模板中的宏，如下是被导入的forms.html&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&amp;amp;#123;% macro input(name, value=&amp;#39;&amp;#39;, type=&amp;#39;text&amp;#39;) -%&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; type &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; value|e &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; name &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endmacro %&amp;amp;#125;

&amp;amp;#123;%- macro textarea(name, value=&amp;#39;&amp;#39;, rows=10, cols=40) -%&amp;amp;#125;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; name &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; rows &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cols&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;amp;#123;&amp;amp;#123; cols
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;        &amp;amp;#125;&amp;amp;#125;&amp;#34;&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; value|e &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;textarea&lt;/span&gt;&amp;gt;
&amp;amp;#123;%- endmacro %&amp;amp;#125;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以这样使用&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;amp;#123;% import &amp;#39;forms.html&amp;#39; as forms %&amp;amp;#125;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;Username&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; forms.input(&amp;#39;username&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;Password&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; forms.input(&amp;#39;password&amp;#39;, type=&amp;#39;password&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; forms.textarea(&amp;#39;comment&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还可以导入到命名空间中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;amp;#123;% from &amp;#39;forms.html&amp;#39; import input as input_field, textarea %&amp;amp;#125;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;Username&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input_field(&amp;#39;username&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;Password&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dt&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; input_field(&amp;#39;password&amp;#39;, type=&amp;#39;password&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dd&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;dl&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;amp;#123;&amp;amp;#123; textarea(&amp;#39;comment&amp;#39;) &amp;amp;#125;&amp;amp;#125;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;p&gt;基本是&lt;code&gt;W3Cschool&lt;/code&gt;的学习笔记，大部分是复制粘贴的，相当于读写一遍，侵删，以上&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>关于Cookie和Session以及Token的说明</title>
      <link>http://blog.gourds.site/post/%E5%85%B3%E4%BA%8Ecookie%E5%92%8Csession%E4%BB%A5%E5%8F%8Atoken%E7%9A%84%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 25 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E5%85%B3%E4%BA%8Ecookie%E5%92%8Csession%E4%BB%A5%E5%8F%8Atoken%E7%9A%84%E8%AF%B4%E6%98%8E/</guid>
      
        <description>&lt;p&gt;现在做web的话就绕不开安全认证这一步，那就先介绍下目前常见的认证方式然后再说关于cookie、session、token的东西。常用的认证方式简单概述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie-session认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;出现较早的认证方式，主要形式是浏览器客户端将用户名密码发送给服务器，服务器验证后创建session并发放用于识别用户的sessionID（与用户状态绑定后记录在服务器端），这个sessionID以及一些相关的其他信息就是cookie，cookie随着响应(Set-Cookie)返回给客户端由客户端存储于浏览器，之后客户端的请求都会带上这个cookie，服务端通过cookie来获取Session信息从而进行认证校验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Oauth认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Oauth是一种授权机制，主要为第三方应用颁发授权令牌（token）,目前有Oauth2.0和Oauth1.0版本，其中Oauth2.0版本的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6749.html&#34;&gt;RFC6749&lt;/a&gt;，Oauth1.0版本的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5849&#34;&gt;RFC5849&lt;/a&gt;。Oauth2.0的具体介绍可以参考&lt;a href=&#34;http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html&#34;&gt;阮一峰|Oauth2.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JWT认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JWT的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7519.html&#34;&gt;RFC7519&lt;/a&gt;。大概原理是客户端经过服务器认证后服务器给客户端返回一个json对象（包含用户信息且加密处理的数据），之后客户端与服务器通信都会带上这个json对象，服务器只通过这个对象来认证用户，也就是说服务器端是无状态的不会保存状态数据了（比如session）。具体可参考&lt;a href=&#34;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&#34;&gt;阮一峰|JSON Web Token 入门教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;概念梳理&#34;&gt;概念梳理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Cookie（复数形态Cookies），又称为“小甜饼”。类型为“小型文本文件”[1]，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明[2]。最初定义于RFC 2109。当前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。&lt;/p&gt;
&lt;p&gt;Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie。内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。&lt;/p&gt;
&lt;p&gt;Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态&lt;/p&gt;
&lt;p&gt;使用Cookie的缺陷：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cookie会被附加在每个HTTP请求中，所以无形中增加了流量&lt;/li&gt;
&lt;li&gt;由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题，除非用HTTPS&lt;/li&gt;
&lt;li&gt;Cookie的大小限制在4KB左右，对于复杂的存储需求来说是不够用的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;ndash;选自&lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_cookie&#34;&gt;Wikipedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Session&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;跟上面cookie不同，cookie是实际存在的，而session是一个抽象概念，我们更多说的是session的实现。session其实就是服务器用来保存用户会话状态（因为HTTP是一个无状态的协议）的一种机制。&lt;/p&gt;
&lt;p&gt;服务器session存放在服务器（默认存在文件也可以存在内存、数据库中），运行需要依赖于session id，不过一般session id会存在客户端cookie中（当然如果浏览器禁用cookie的话，也可以通过其他方式实现，比如通过url来传递）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Token&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这里说的token是access token，仅仅是指访问资源凭证，是跟上面说的Oauth认证相关的。主要针对的是从第三方应用获得授权登录，客户端从第三方应用获取的授权登录令牌，我们就称为token。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;代码示例flask&#34;&gt;代码示例（Flask）&lt;/h3&gt;
&lt;p&gt;下面就FLask来做一些代码演示&lt;/p&gt;
&lt;h4 id=&#34;demo-1逻辑演示&#34;&gt;Demo-1（逻辑演示）&lt;/h4&gt;
&lt;p&gt;如果不使用session-cookie机制，我们也可以实现用户的登录控制,下面这个非常简陋只是为了演示下登录验证的思路，不必纠结细节，极其不pythonic，代码臃肿且不科学。说一下下面的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缺失判断来源的逻辑（应该增加判断条件更准确的鉴别请求来源）&lt;/li&gt;
&lt;li&gt;每次都需要重新登录验证&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; allow_login
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arvon&amp;#39;&lt;/span&gt;:
        allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success login&amp;#39;&lt;/span&gt;
    allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page1&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page1&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; allow_login
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; allow_login &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page1&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;))
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page2&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page2&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;global&lt;/span&gt; allow_login
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; allow_login &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
        allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page2&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;demo-2使用session-cookie&#34;&gt;demo-2（使用session-cookie）&lt;/h4&gt;
&lt;p&gt;使用session-cookie的话，如下
在下面的例子中当键入用户密码发出POST请求后，服务器的response是&lt;code&gt;Set-cookie:session=eyJnb3VyZHMiOiJnb3VyZHMtc2Vzc2lvbiJ9.EEaMcA.eV2X1jpYYTAZePmRTT5cdYhUfXw; HttpOnly; Path=/&lt;/code&gt;,从浏览器开发者模式可以看到这个值存放在浏览器&lt;code&gt;cookies&lt;/code&gt;下，然后访问其他页面时请求头（Request headers:&lt;code&gt;session=eyJnb3VyZHMiOiJnb3VyZHMtc2Vzc2lvbiJ9.EEaMcA.eV2X1jpYYTAZePmRTT5cdYhUfXw&lt;/code&gt;）会带上这个cookie&lt;code&gt;session=eyJnb3VyZHMiOiJnb3VyZHMtc2Vzc2lvbiJ9.EEaMcA.eV2X1jpYYTAZePmRTT5cdYhUfXw&lt;/code&gt;，就避免了每次输入账号密码的尴尬了。如果在浏览器在这个cookie删除或者禁用，就不能正常访问了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Python&#34; data-lang=&#34;Python&#34;&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arvon&amp;#39;&lt;/span&gt;:
        session[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds-session&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success login&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page1&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page1&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page1&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page2&amp;#39;&lt;/span&gt;,methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;],endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page2&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page2&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(url_for(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;demo-3使用flask的特殊装饰符&#34;&gt;Demo-3(使用Flask的特殊装饰符)&lt;/h4&gt;
&lt;p&gt;使用Flask的特殊装饰符&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Flask(__name__)
allow_login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;before_request
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;check_status&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;path &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; session&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt;):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; redirect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/login&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;], endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;form[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;arvon&amp;#39;&lt;/span&gt;:
        session[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gourds-session&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;success login&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; render_template(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;login.html&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page1&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;], endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p1&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page1&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page1&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;@app&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/page2&amp;#39;&lt;/span&gt;, methods&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;], endpoint&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;p2&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;page2&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;play page2&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参考文档&#34;&gt;参考文档&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc2109.html&#34;&gt;RFC2109 | HTTP State Management Mechanism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Session_(computer_science)&#34;&gt;wikipedia|Session&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Access_token&#34;&gt;wikipedia|Access_token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/moyand/p/9047978.html&#34;&gt;墨颜丶 | 彻底理解cookie，session，token&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/bd1be47a16c1&#34;&gt;骑小猪看流星 | Cookie、Session、Token那点事儿&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000017831088&#34;&gt;心难收 | 彻底弄懂session，cookie，token&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Aws使用EMR对Dynamodb进行备份还原</title>
      <link>http://blog.gourds.site/post/aws%E4%BD%BF%E7%94%A8emr%E5%AF%B9dynamodb%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</link>
      <pubDate>Wed, 21 Aug 2019 13:38:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/aws%E4%BD%BF%E7%94%A8emr%E5%AF%B9dynamodb%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</guid>
      
        <description>&lt;p&gt;最近需要对DynamoDB的数据进行迁移，由于现阶段将Dynamo的容量模式由&lt;code&gt;AutoScaling&lt;/code&gt;修改成了&lt;code&gt;按需&lt;/code&gt;，当使用之前的HIVE脚本时出现了&lt;code&gt;Read throughput should not be less than 1&lt;/code&gt;的报错，报错跟DynamoDB的容量有关，继而准备用Ansible在执行脚本前将Dynamo的容量和模式进行调整，又发现了Ansible的Dynamo模块现阶段还没有支持&lt;code&gt;On-Demand billing&lt;/code&gt;这个功能，接着又准备使用&lt;code&gt;awscli&lt;/code&gt;命令行进行调整，经调研这个应该是可以对Dynamo进行调整的，文章后面有一些资料可以参考，现在由于AWS官方给出了回复，所以就不用搞这个了，直接升级版本就好了，更省事。关于版本问题可以看下面说的&lt;code&gt;版本问题说明&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;使用hive进行table的备份和还原&#34;&gt;使用Hive进行Table的备份和还原&lt;/h3&gt;
&lt;p&gt;需要使用EMR版本需要&lt;code&gt;5.22.0&lt;/code&gt;以上&lt;/p&gt;
&lt;h4 id=&#34;使用hive导出dynamo&#34;&gt;使用Hive导出Dynamo&lt;/h4&gt;
&lt;p&gt;使用的备份Hive脚本（backup_dynamo.q)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE EXTERNAL TABLE ${DynamoDBName} (item map&amp;lt;string,string&amp;gt;)
STORED BY &#39;org.apache.hadoop.hive.dynamodb.DynamoDBStorageHandler&#39;
TBLPROPERTIES (&amp;quot;dynamodb.table.name&amp;quot; = &amp;quot;${DynamoDBName}&amp;quot;);

CREATE EXTERNAL TABLE ${DynamoDBName}s3  (item map&amp;lt;string, string&amp;gt;)
ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\t&#39; LINES TERMINATED BY &#39;\n&#39;
LOCATION &#39;${OUTPUT}/&#39;;
SET dynamodb.throughput.read.percent=${SPEEDX};
INSERT OVERWRITE TABLE ${DynamoDBName}s3 SELECT * FROM ${DynamoDBName};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;pipeline script&lt;/code&gt;，脚本内容如下(里面有两个参数变量一个是SPEED可选&lt;a href=&#34;%E5%85%B7%E4%BD%93%E5%8F%AF%E5%8F%82%E7%85%A7%E6%96%87%E6%9C%AB%E7%9A%84Dynamo%E5%90%9E%E5%90%90%E9%87%8F%E8%AF%B4%E6%98%8E%E9%93%BE%E6%8E%A5&#34;&gt;0.1-1.5&lt;/a&gt;，另一个是DBS是要备份的dynamodb的表名，多个表的话用&lt;code&gt;,&lt;/code&gt;分割)
其中&lt;code&gt;s3://backup-205/dynamodb/scripts/backup_dynamo.q&lt;/code&gt;是上面备份语句文件所在的位置
其中&lt;code&gt;s3://backup-to-dir/dynamodb/&lt;/code&gt;是备份文件输出的位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import groovy.json.JsonOutput
_EMRHiveScript = new String(&#39;s3://scripts/backup_dynamo.q&#39;)
def date = new Date()
datesubfolder = date.format(&#39;yyyyMMddhhmmz&#39;)

@NonCPS
def GenerateEMRShellTask(name, cmds) {
  def map = [:]
  map.Type = &#39;CUSTOM_JAR&#39;
  map.ActionOnFailure = &#39;CONTINUE&#39;
  map.Jar = &amp;quot;command-runner.jar&amp;quot;
  // String Properties
  map.Name = name
  map.Args = cmds.split(&#39; &#39;)
  return map
}

@NonCPS
def GenerateDynamoBackupStep(dbName, speed, output) {
    if (speed &amp;gt; 1.5){
      speed = 1.5
    }
    cmd = &amp;quot;&amp;quot;&amp;quot;hive-script --run-hive-script --args -f ${_EMRHiveScript} -d OUTPUT=${output} -d DynamoDBName=${dbName} -d SPEEDX=${speed}&amp;quot;&amp;quot;&amp;quot;
    return GenerateEMRShellTask(dbName+&#39;Backup&#39;, cmd)
}

@NonCPS
def GetCmds() {
    def speed = Float.valueOf(SPEED)
    def ret = []

    if(DBS.size() &amp;lt; 1) {
        error &amp;quot;没选择任何数据库&amp;quot;
    }

    DBS.split(&#39;,&#39;).each{ it -&amp;gt;
      ret &amp;lt;&amp;lt; GenerateDynamoBackupStep(it, speed, &#39;s3://backup-to-dir/dynamodb/&#39; + it + &#39;/&#39; + datesubfolder)
    }
    def steps = JsonOutput.prettyPrint(JsonOutput.toJson(ret))
    return &amp;quot;&amp;quot;&amp;quot;
aws emr create-cluster \
--region ap-southeast-1 \
--release-label emr-5.22.0 \
--auto-terminate \
--applications Name=Hadoop Name=Hive --name &#39;BackupDynamoDBFullSpeed&#39; \
--tags &#39;Name=EMRBackup&#39; \
--instance-groups &#39;
[
    {
        &amp;quot;InstanceCount&amp;quot;: 1,
        &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;MASTER&amp;quot;,
        &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;Master Instance Group&amp;quot;
    },
    {
        &amp;quot;InstanceCount&amp;quot;: 3,
        &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;CORE&amp;quot;,
        &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;Core Instance Group&amp;quot;
    }
]
&#39; \
--ec2-attributes &#39;
{
    &amp;quot;KeyName&amp;quot;: &amp;quot;server-pem&amp;quot;,
    &amp;quot;InstanceProfile&amp;quot;: &amp;quot;EMR_EC2_DefaultRole&amp;quot;,
    &amp;quot;SubnetId&amp;quot;: &amp;quot;subnet-88a4dbfe&amp;quot;,
    &amp;quot;EmrManagedSlaveSecurityGroup&amp;quot;: &amp;quot;your_set&amp;quot;,
    &amp;quot;EmrManagedMasterSecurityGroup&amp;quot;: &amp;quot;your_set&amp;quot;
}
&#39; \
--service-role EMR_DefaultRole  --steps &#39;
${steps}
&#39;
&amp;quot;&amp;quot;&amp;quot;
}

def shcmd=GetCmds()

node {
    stage &amp;quot;echo cmds for debug&amp;quot;
    echo shcmd

    stage &amp;quot;run aws emr for backup&amp;quot;
    withCredentials([[$class: &#39;StringBinding&#39;, credentialsId: &#39;EMRRUN_KEY_ID&#39;, variable: &#39;AWS_ACCESS_KEY_ID&#39;], [$class: &#39;StringBinding&#39;, credentialsId: &#39;EMRRUN_KEY_SEC&#39;, variable: &#39;AWS_SECRET_ACCESS_KEY&#39;]]) {
        sh shcmd
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;使用hive导入dynamo&#34;&gt;使用Hive导入Dynamo&lt;/h4&gt;
&lt;p&gt;导入的Hive脚本如下（restore_dynamo.q）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE EXTERNAL TABLE ${DynamoDBName}s3 (item map&amp;lt;string, string&amp;gt;)
ROW FORMAT DELIMITED FIELDS TERMINATED BY &#39;\t&#39; LINES TERMINATED BY &#39;\n&#39;
LOCATION &#39;${INPUT}/&#39;;

CREATE EXTERNAL TABLE ${DynamoDBName} (item map&amp;lt;string,string&amp;gt;)
STORED BY &#39;org.apache.hadoop.hive.dynamodb.DynamoDBStorageHandler&#39;
TBLPROPERTIES (&amp;quot;dynamodb.table.name&amp;quot; = &amp;quot;${DynamoDBName}&amp;quot;);

SET dynamodb.throughput.write.percent=${SPEEDX};
INSERT OVERWRITE TABLE ${DynamoDBName} SELECT * FROM ${DynamoDBName}s3;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用的&lt;code&gt;pipeline script&lt;/code&gt;如下,其中需要3个参数配置(&lt;code&gt;SPEED&lt;/code&gt;/&lt;code&gt;datesubfolder&lt;/code&gt;/&lt;code&gt;DBS&lt;/code&gt;)
其中&lt;code&gt;SPEED&lt;/code&gt;跟备份一样是选择速率，&lt;code&gt;datesubfolder&lt;/code&gt;这个需要选择某个备份输出的目录如&lt;code&gt;201805280419CST&lt;/code&gt;,&lt;code&gt;DBS&lt;/code&gt;这个是要还原的表名也就是&lt;code&gt;daesubfolder&lt;/code&gt;备份目录的上以及目录
注意修改&lt;code&gt;s3://backup-to-dir/dynamodb/&lt;/code&gt;这个参数以及脚本里面的集群参数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import groovy.json.JsonOutput
_EMRHiveScript = new String(&#39;s3://scripts/restore_dynamo.q&#39;)
@NonCPS
def GenerateEMRShellTask(name, cmds) {
  def map = [:]
  map.Type = &#39;CUSTOM_JAR&#39;
  map.ActionOnFailure = &#39;CONTINUE&#39;
  map.Jar = &amp;quot;command-runner.jar&amp;quot;
  // String Properties
  map.Name = name
  map.Args = cmds.split(&#39; &#39;)
  return map
}

@NonCPS
def GenerateDynamoBackupStep(dbName, speed, input) {
    if (speed &amp;gt; 1.5){
      speed = 1.5
    }
    cmd = &amp;quot;&amp;quot;&amp;quot;hive-script --run-hive-script --args -f ${_EMRHiveScript} -d INPUT=${input} -d DynamoDBName=${dbName} -d SPEEDX=${speed}&amp;quot;&amp;quot;&amp;quot;
    return GenerateEMRShellTask(dbName+&#39;Restore&#39;, cmd)
}

@NonCPS
def GetCmds() {
    def speed = Float.valueOf(SPEED)
    def ret = []

    if(DBS.size() &amp;lt; 1) {
        error &amp;quot;没选择任何数据库&amp;quot;
    }

    DBS.split(&#39;,&#39;).each{ it -&amp;gt;
      ret &amp;lt;&amp;lt; GenerateDynamoBackupStep(it, speed, &#39;s3://backup-to-dir/dynamodb/&#39; + it + &#39;/&#39; + datesubfolder)
    }
    def steps = JsonOutput.prettyPrint(JsonOutput.toJson(ret))
    return &amp;quot;&amp;quot;&amp;quot;
aws emr create-cluster \
--region ap-southeast-1 \
--release-label emr-5.22.0 \
--auto-terminate \
--applications Name=Hadoop Name=Hive --name &#39;BackupDynamoDBFullSpeed&#39; \
--tags &#39;Name=EMRBackup&#39; \
--instance-groups &#39;
[
    {
        &amp;quot;InstanceCount&amp;quot;: 1,
        &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;MASTER&amp;quot;,
        &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;Master Instance Group&amp;quot;
    },
    {
        &amp;quot;InstanceCount&amp;quot;: 3,
        &amp;quot;InstanceGroupType&amp;quot;: &amp;quot;CORE&amp;quot;,
        &amp;quot;InstanceType&amp;quot;: &amp;quot;m3.xlarge&amp;quot;,
        &amp;quot;Name&amp;quot;: &amp;quot;Core Instance Group&amp;quot;
    }
]
&#39; \
--ec2-attributes &#39;
{
    &amp;quot;KeyName&amp;quot;: &amp;quot;server-pem&amp;quot;,
    &amp;quot;InstanceProfile&amp;quot;: &amp;quot;EMR_EC2_DefaultRole&amp;quot;,
    &amp;quot;SubnetId&amp;quot;: &amp;quot;subnet-88a4dbfe&amp;quot;,
    &amp;quot;EmrManagedSlaveSecurityGroup&amp;quot;: &amp;quot;your_set&amp;quot;,
    &amp;quot;EmrManagedMasterSecurityGroup&amp;quot;: &amp;quot;your_set&amp;quot;
}
&#39; \
--service-role EMR_DefaultRole  --steps &#39;${steps}&#39;
&amp;quot;&amp;quot;&amp;quot;
}

def shcmd=GetCmds()

node {
    stage &amp;quot;echo cmds for debug&amp;quot;
    echo shcmd

    stage &amp;quot;run aws emr for backup&amp;quot;
    withCredentials([[$class: &#39;StringBinding&#39;, credentialsId: &#39;EMRRUN_KEY_ID&#39;, variable: &#39;AWS_ACCESS_KEY_ID&#39;], [$class: &#39;StringBinding&#39;, credentialsId: &#39;EMRRUN_KEY_SEC&#39;, variable: &#39;AWS_SECRET_ACCESS_KEY&#39;]]) {
        sh shcmd
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;版本问题的说明&#34;&gt;版本问题的说明&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：使用EMR版本&lt;code&gt;emr-4.7.2&lt;/code&gt;时会出现以下报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Logging initialized using configuration in file:/etc/hive/conf.dist/hive-log4j.properties
WARNING: Configured write throughput of the dynamodb table HMTGift is less than the cluster map capacity. ClusterMapCapacity: 30 WriteThroughput: 0
WARNING: Writes to this table might result in a write outage on the table.
OK
Time taken: 1.786 seconds
OK
Time taken: 0.349 seconds
Query ID = hadoop_xxxx_xxxx-xxxx-xxxx
Total jobs = 3
Launching Job 1 out of 3
Number of reduce tasks is set to 0 since there&#39;s no reduce operator
java.lang.RuntimeException: Read throughput should not be less than 1. Read throughput percent: 0.0
	at org.apache.hadoop.dynamodb.read.AbstractDynamoDBInputFormat.getSplits(AbstractDynamoDBInputFormat.java:51 )
	at org.apache.hadoop.hive.ql.io.HiveInputFormat.addSplitsForGroup(HiveInputFormat.java:298 )
	at org.apache.hadoop.hive.ql.io.HiveInputFormat.getSplitsInternal(HiveInputFormat.java:412 )
	at org.apache.hadoop.hive.ql.io.HiveInputFormat.getSplits(HiveInputFormat.java:330 )
	at org.apache.hadoop.hive.ql.io.CombineHiveInputFormat.getCombineSplits(CombineHiveInputFormat.java:311 )
	at org.apache.hadoop.hive.ql.io.CombineHiveInputFormat.getSplitsInternal(CombineHiveInputFormat.java:519 )
	at org.apache.hadoop.hive.ql.io.CombineHiveInputFormat.getSplits(CombineHiveInputFormat.java:463 )
	at org.apache.hadoop.mapreduce.JobSubmitter.writeOldSplits(JobSubmitter.java:328 )
	at org.apache.hadoop.mapreduce.JobSubmitter.writeSplits(JobSubmitter.java:320 )
	at org.apache.hadoop.mapreduce.JobSubmitter.submitJobInternal(JobSubmitter.java:196 )
	at org.apache.hadoop.mapreduce.Job$10.run (Job.java:1290 )
	at org.apache.hadoop.mapreduce.Job$10.run (Job.java:1287 )
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:415 )
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657 )
	at org.apache.hadoop.mapreduce.Job.submit(Job.java:1287 )
	at org.apache.hadoop.mapred.JobClient$1.run (JobClient.java:575 )
	at org.apache.hadoop.mapred.JobClient$1.run (JobClient.java:570 )
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:415 )
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657 )
	at org.apache.hadoop.mapred.JobClient.submitJobInternal(JobClient.java:570 )
	at org.apache.hadoop.mapred.JobClient.submitJob(JobClient.java:561 )
	at org.apache.hadoop.hive.ql.exec.mr.ExecDriver.execute(ExecDriver.java:429 )
	at org.apache.hadoop.hive.ql.exec.mr.MapRedTask.execute(MapRedTask.java:137 )
	at org.apache.hadoop.hive.ql.exec.Task.executeTask(Task.java:160 )
	at org.apache.hadoop.hive.ql.exec.TaskRunner.runSequential(TaskRunner.java:85 )
	at org.apache.hadoop.hive.ql.Driver.launchTask(Driver.java:1618 )
	at org.apache.hadoop.hive.ql.Driver.execute(Driver.java:1379 )
	at org.apache.hadoop.hive.ql.Driver.runInternal(Driver.java:1192 )
	at org.apache.hadoop.hive.ql.Driver.run (Driver.java:1019 )
	at org.apache.hadoop.hive.ql.Driver.run (Driver.java:1009 )
	at org.apache.hadoop.hive.cli.CliDriver.processLocalCmd(CliDriver.java:201 )
	at org.apache.hadoop.hive.cli.CliDriver.processCmd(CliDriver.java:153 )
	at org.apache.hadoop.hive.cli.CliDriver.processLine(CliDriver.java:364 )
	at org.apache.hadoop.hive.cli.CliDriver.processLine(CliDriver.java:299 )
	at org.apache.hadoop.hive.cli.CliDriver.processReader(CliDriver.java:397 )
	at org.apache.hadoop.hive.cli.CliDriver.processFile(CliDriver.java:413 )
	at org.apache.hadoop.hive.cli.CliDriver.executeDriver(CliDriver.java:668 )
	at org.apache.hadoop.hive.cli.CliDriver.run (CliDriver.java:631 )
	at org.apache.hadoop.hive.cli.CliDriver.main(CliDriver.java:570 )
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57 )
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43 )
	at java.lang.reflect.Method.invoke(Method.java:606 )
	at org.apache.hadoop.util.RunJar.run (RunJar.java:221 )
	at org.apache.hadoop.util.RunJar.main(RunJar.java:136 )
Job Submission failed with exception &#39;java.lang.RuntimeException(Read throughput should not be less than 1. Read throughput percent: 0.0)&#39;
FAILED: Execution Error, return code 1 from org.apache.hadoop.hive.ql.exec.mr.MapRedTask
Command exiting with ret &#39;1&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;给AWS提了Case，确定是EMR版本问题（这是一个已知issue，在5.22.0版本修复），AWS官方回复如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从emr-5.22.0开始，可以成功运行Hive语句和on-demand table进行import/export操作
根据调查，这是老EMR版本中使用的EMR DDB connector的known issue，由于在EMR中Apache Hadoop, Hive, Spark会使用该connector去访问Dynamodb，老版本中DDB connector并不支持和on-demand配置类型的Dynamodb table操作，且并没有其他的workaround。该问题已经在EMR release 5.22中被修复。
我建议您使用emr-5.22.0及以上的版本来和on-demand Dynamodb table交互。如果您的使用条件不允许进行EMR升级，建议您将Dynamodb table转为预配置（provision）进行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用awscli管理dynamodb&#34;&gt;使用AWSCLI管理DynamoDB&lt;/h3&gt;
&lt;p&gt;这个AWS官网的文档很清晰，就不赘述了，最下面附有链接，简单例子如下
容量调整&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;aws --region ap-southeast-1 dynamodb update-table --table-name your_table_name --provisioned-throughput ReadCapacityUnits=300,WriteCapacityUnits=120
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用ansible管理dynamodb&#34;&gt;使用Ansible管理DynamoDB&lt;/h3&gt;
&lt;p&gt;目前使用Ansible还不能实现DynamoDB计费模式的更改（因为后来加入的按需付费功能），如果使用了按需付费就不能使用Ansible的Dynamo模块进行容量变更也不能更改Dynamodb的付费模式。目前Ansible还没有加入这个功能，感兴趣的话可以通过这个&lt;a href=&#34;https://github.com/ansible/ansible/issues/56923&#34;&gt;ISSUES&lt;/a&gt;进行追踪.&lt;/p&gt;
&lt;p&gt;另外可以参考&lt;a href=&#34;https://docs.ansible.com/ansible/latest/modules/dynamodb_table_module.html&#34;&gt;Ansible的Dynamo模块文档&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#https://docs.ansible.com/ansible/latest/modules/dynamodb_table_module.html
- hosts: localhost
  remote_user: ec2-user
  become: no
  become_user: root
  gather_facts: false
  vars:
    my_env_access_key: xxx
    my_env_secret_key: xxx
  tasks:
  #205 and 209
  - dynamodb_table:
      name: my-table
      region: us-east-1
      aws_access_key: &amp;quot;{{ my_env_access_key }}&amp;quot;
      aws_secret_key: &amp;quot;{{ my_env_secret_key }}&amp;quot;
      read_capacity: 300
      write_capacity: 30
      with_items:
        - &amp;quot;GMInfo&amp;quot;
        - &amp;quot;HMTGift&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;其他一些文档&#34;&gt;其他一些文档&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/EMRforDynamoDB.PerformanceTuning.Throughput.html&#34;&gt;关于DynamoDB吞吐量的文档&lt;/a&gt;
&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/Limits.html#default-limits-throughput-capacity-modes&#34;&gt;关于DynamoDB的一些限制&lt;/a&gt;
&lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/reference/dynamodb/index.html#cli-aws-dynamodb&#34;&gt;使用AWSCLI管理DynamoDB的文档&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker方式下Bitbucket及confluence和jira的迁移</title>
      <link>http://blog.gourds.site/post/docker%E6%96%B9%E5%BC%8F%E4%B8%8Bbitbucket%E5%8F%8Aconfluence%E5%92%8Cjira%E8%BF%81%E7%A7%BB%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 29 Nov 2018 13:57:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/docker%E6%96%B9%E5%BC%8F%E4%B8%8Bbitbucket%E5%8F%8Aconfluence%E5%92%8Cjira%E8%BF%81%E7%A7%BB%E6%96%87%E6%A1%A3/</guid>
      
        <description>&lt;p&gt;之前写过使用Docker部署Confluence、Jira、Bitbucket的文档，由于宿主服务器硬件有点跟不上了，所以前端时间进行了这些服务的迁移。这里先介绍Confluence及Jira的迁移过程。简单介绍下做的事情
&lt;strong&gt;迁移思路：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;按照原来搭建方法在新宿主机上新建相同的容器（注意控制版本，可以用指定的版本来替代image的latest标签）&lt;/li&gt;
&lt;li&gt;将备份的数据导入新的容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里面最容易出问题的就是备份数据是否是完全完整的，比如Jira的附件及插件、Bitbucket代码是可以导入等，当然许多官方会有相关的提示，不过并没有提供更详尽的解决过程，这里算一个补充吧。
PS：Atlassian的这几个服务都是有自动备份功能的，所以也不需要过多干涉，后面的还原数据操作，Jira和Confluence都是用的应用自己的备份，备份路径也是官方Docker的路径（这个就根据实际情况拿到备份就行了）。还有本来想贴几个图可能会更直观，不过七牛的图床域名被回收了，之后应该会用&lt;a href=&#34;https://github.com/Chevereto/Chevereto-Free&#34;&gt;【chevreto】&lt;/a&gt;，有时间了整一整。&lt;/p&gt;
&lt;h3 id=&#34;创建mysql容器&#34;&gt;创建Mysql容器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动容器
先说一下为什么用Mysql，因为刚开始只是有一个Jira的需求，然后选用DB的时候感觉Mysql相对Postsql更易于操作维护，就选了这个，这导致了后面Confluence的DB问题，不过都顺利解决了。Docker启动新容器的命令如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name mysql
           -p 3306:3306 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           -v /data/mysql/data:/var/lib/mysql &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           -e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           -idt docker.io/mysql:5.7.21 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --character-set-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --collation-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8_bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --character-set-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --collation-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8_bin &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --max_allowed_packet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;512M   &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;           --innodb_log_file_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2GB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意Mysql启动时候的参数，不注意这个后面会有好多个坑。
使用Mysql的要求 =&amp;gt;&lt;a href=&#34;https://confluence.atlassian.com/doc/database-setup-for-mysql-128747.html&#34;&gt;【Confluence的文档】&lt;/a&gt;
修改建议 =&amp;gt;&lt;a href=&#34;https://confluence.atlassian.com/confkb/mysqlsyntaxerrorexception-row-size-too-large-658735905.html&#34;&gt;【Confluence的建议】&lt;/a&gt;
关于参数的解释 =&amp;gt; &lt;a href=&#34;https://blog.csdn.net/kai404/article/details/80242262&#34;&gt;【CSDN上的一篇博客】&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mysql容器的配置
登入Mysql进行DB和用户的创建&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mysql&amp;gt; CREATE DATABASE jira_db CHARACTER SET utf8 COLLATE utf8_bin;
mysql&amp;gt; grant ALL PRIVILEGES on jira_db.* to jira_user@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; Identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jira_pass&amp;#34;&lt;/span&gt;;
mysql&amp;gt; CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;
mysql&amp;gt; grant ALL PRIVILEGES on confluence.* to confluence_user@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; Identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confluence_pass&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#75715e&#34;&gt;#mysql&amp;gt; grant SELECT on *.* to backup_user@&amp;#34;%&amp;#34; Identified by &amp;#34;backup_user&amp;#34;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#mysql&amp;gt; grant ALL PRIVILEGES on *.* to sa_user@&amp;#34;%&amp;#34; Identified by &amp;#34;sa_user&amp;#34;;&lt;/span&gt;
mysql&amp;gt; flush privileges;
&lt;span style=&#34;color:#75715e&#34;&gt;#set global max_allowed_packet=1073741824;  当导入时有可能是这个值过小，可以临时进行调整。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Mysql容器的检查
登入Mysql对配置进行检查&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it mysql /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;#进入mysql容器&lt;/span&gt;
mysql&amp;gt; show global variables; 展示所有配置
mysql&amp;gt; show engine innodb status&lt;span style=&#34;color:#ae81ff&#34;&gt;\G&lt;/span&gt;;  查看innodb装填
mysql&amp;gt; show variables like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;character%&amp;#39;&lt;/span&gt;; 查看字符集设置
mysql&amp;gt; show variables like &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;innodb_log_file%&amp;#39;&lt;/span&gt;;查看innodb_log_file设置
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新建jira容器并还原数据&#34;&gt;新建Jira容器并还原数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动Jira容器
先启动容器，不做其他操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -p 18080:8080 -dit --name jira docker.io/cptactionhank/atlassian-jira:7.8.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;原数据导出
注意权限，也可以在导入操作进行权限的修改。另外官方备份的数据并不包括附件及插件等，具体可参照&lt;a href=&#34;https://confluence.atlassian.com/adminjiraserver078/backing-up-data-947189268.html&#34;&gt;【官方说明】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#导出Jira应用数据&lt;/span&gt;
docker cp jira_v1:/var/atlassian/jira/export/2018-Nov-18--1058.zip ./
chown -R daemon.daemon 2018-Nov-18--1058.zip
&lt;span style=&#34;color:#75715e&#34;&gt;#导出Jira附件&lt;/span&gt;
docker exec -it jira_v1 /bin/bash
&amp;gt; cd /var/atlassian/jira/
&amp;gt; tar czvf jira_data_20181118.tar.gz /data/
docker cp /var/atlassian/jira/jira_data_20181118.tar.gz ./
&lt;span style=&#34;color:#75715e&#34;&gt;#导出插件&lt;/span&gt;
docker cp jira_v1:/var/atlassian/jira/jira_plugins_20181118.tar.gz ./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;将备份数据导入指定目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#导入Jira应用数据&lt;/span&gt;
docker cp 2018-Nov-18--1058.zip jira:/var/atlassian/jira/import/
chown -R daemon.daemon 2018-Nov-18--1058.zip
&lt;span style=&#34;color:#75715e&#34;&gt;#导入附件&lt;/span&gt;
scp old-host:/tmp/jira_data_20181118.tar.gz ./jira_data_20181118.tar.gz
chown daemon.daemon jira_data_20181118.tar.gz
docker cp jira_data_20181118.tar.gz  jira:/var/atlassian/jira/
&lt;span style=&#34;color:#75715e&#34;&gt;#导入插件&lt;/span&gt;
docker cp jira_v1:/var/atlassian/jira/jira_plugins_20181118.tar.gz ./
scp old-host:/tmp/jira_plugins_20181118.tar.gz ./
docker cp jira_plugins_20181118.tar.gz jira:var/atlassian/jira/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Jira初始化
在完成数据导入后，就可以登录&lt;code&gt;http://your_host:18080&lt;/code&gt;，按照提示进行授权码的购买或输入。然后在最后的步骤会让选择是作为新的服务器还是从备份恢复，选择从备份恢复即可。提示还是很到位的，注意权限，权限不对的话数据导入会报错，在Jira的log里会有体现。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker logs -f jira &lt;span style=&#34;color:#75715e&#34;&gt;#追踪jira的log输出&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;没有问题的话，Jira就恢复完成了，另外还有下一步的参数优化，因为官方设置的JVM默认值偏低，所以最好提前调整了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jira的参数优化
其实容器启动的时候也可以指定，不过这个后续可能还会变动，直接修改便于维护就这样了，这个根据实际使用情况修改吧&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it -u root jira /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#进入容器后执行以下命令&lt;/span&gt;
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s@JVM_MINIMUM_MEMORY=.*@JVM_MINIMUM_MEMORY=&amp;#34;1024m&amp;#34;@&amp;#39;&lt;/span&gt; /opt/atlassian/jira/bin/setenv.sh
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s@JVM_MAXIMUM_MEMORY=.*@JVM_MAXIMUM_MEMORY=&amp;#34;2048m&amp;#34;@&amp;#39;&lt;/span&gt; /opt/atlassian/jira/bin/setenv.sh
&lt;span style=&#34;color:#75715e&#34;&gt;#修改完之后，退出容器然后重启Jira容器即可&lt;/span&gt;
docker restart jira
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;OK，完成了Jira的迁移还原操作&lt;/p&gt;
&lt;h3 id=&#34;新建confluence容器并还原数据&#34;&gt;新建Confluence容器并还原数据&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;启动Confluence容器&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -v /data/confluence:/var/atlassian/application-data/confluence --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confluence&amp;#34;&lt;/span&gt; -d -p 8090:8090 -p 8091:8091 confluence-oracle-jdk:v6.8.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Confluence原数据导出
因为这个数据目录是直接挂在出来的，备份路径在&lt;code&gt;/data/confluence/backups/backup-2018_11_18.zip&lt;/code&gt;（根据挂在路径的不同略有差异）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confluence数据导入&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;scp old-host:/data/confluence/backups/backup-2018_11_18.zip ./
mv backup-2018_11_18.zip /data/confluence/restore/
chown daemon.daemon /data/confluence/restore/backup-2018_11_18.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Confluence初始化
访问&lt;code&gt;http://your_host:8090&lt;/code&gt;,根据提示进行设置，需要注意连接DB的设置需要指定连接Mysql的参数,选择JDBC的方式，如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;jdbc:mysql://your_host:3306/confluence?sessionVariables=tx_isolation=&#39;READ-COMMITTED&#39;&amp;amp;useSSL=false&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后就可以正常使用了，跟Jira一样，JVM的参数也可以调整，不然的话，一段时间后可能内存就不够用了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Confluence启动参数修改&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker exec -it -u root confluence /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#进入Confluence容器后，执行以下命令&lt;/span&gt;
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s@CATALINA_OPTS=&amp;#34;-Xms.*@CATALINA_OPTS=&amp;#34;-Xms4096m -Xms4096m ${JVM_SUPPORT_RECOMMENDED_ARGS} -Dconfluence.home=${CONFLUENCE_HOME} -XX:+UseG1GC ${CATALINA_OPTS}&amp;#34;@&amp;#39;&lt;/span&gt;  /opt/atlassian/confluence/bin/setenv.sh
&lt;span style=&#34;color:#75715e&#34;&gt;#修改完参数后重启即可&lt;/span&gt;
docker restart  confluence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;新建bitbucket容器并还原数据&#34;&gt;新建Bitbucket容器并还原数据&lt;/h3&gt;
&lt;p&gt;Bitbucket的迁移采用了相对暴力的方式，可以参照&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/migrating-bitbucket-server-to-another-server-776640406.html&#34;&gt;【官方迁移向导】&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bitbucket使用的是Docker-compose的方式进行部署的，如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;postgresql&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;sameersbn/postgresql:9.4-3&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_USER=bitbucket&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_PASS=bitbucket_pass&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;DB_NAME=bitbucket&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/srv/docker/bitbucket/postgresql:/var/lib/postgresql&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;bitbucket&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;atlassian/bitbucket-server:5.0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;links&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;postgresql:postgresql&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;80:7990&amp;#34;&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7999:7999&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BITBUCKET_PROXY_NAME=&amp;#39;&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BITBUCKET_PROXY_PORT=&amp;#39;&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BITBUCKET_PROXY_SCHEME=&amp;#39;&lt;/span&gt;
    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;BITBUCKET_DELAYED_START=&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;/srv/docker/bitbucket/app-data:/var/atlassian/application-data/bitbucket&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;导出数据
先停止原服务，防止迁移过程中有数据的读写变化&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#从上一步可以看出是直接原来的数据目录直接全部拿过来了&lt;/span&gt;
tar czvf bitbucket_20181118.tar.gz  /srv/docker/bitbucket/
bitbucket_20181118.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;将备份数据放入挂载目录&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;tar xvf bitbucket_20181118.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;启动Bitbucket&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;补充点&#34;&gt;补充点&lt;/h3&gt;
&lt;p&gt;所有迁移完成后，由于机器IP域名等可能会变化，所以应用间的联通性需要重新建立，这就牵涉使用问题了，不赘述了。以后有其他操作及坑再同步。&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Docker方式安装Jumpserver</title>
      <link>http://blog.gourds.site/post/docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85jumpserver/</link>
      <pubDate>Tue, 27 Nov 2018 15:00:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85jumpserver/</guid>
      
        <description>&lt;p&gt;之前有自己手动封装过Jumpserver的Docker镜像，既然官方发布的有Docker那就使用官方的。不过官方的是DockerAllinone模式，推荐使用外置DB及Reids。所以这里就再弄一个用。如官方所述需要注意Mysql的编码问题，另外还有一个关于Docker的volume小瑕疵，其他的就没有什么问题了。官方链接放在最后需要的自取，另外以下代码在我的&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/jumpserver&#34;&gt;【github】&lt;/a&gt;上都有。&lt;/p&gt;
&lt;h3 id=&#34;开箱即用&#34;&gt;开箱即用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;准备工作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;my.cnf (指定Mysql的启动配置)&lt;/li&gt;
&lt;li&gt;docker-compose.yml （编排配置）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Mysql配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;mysqld]&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;character-set-server = utf8&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;collation-server = utf8_unicode_ci&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;skip-character-set-client-handshake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用的docker-compose如下&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;3&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;services&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;db&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysql:5.7.23&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;always&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mysql_jms&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;MYSQL_DATABASE&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jumpserver&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;MYSQL_USER&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jumpserver&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;MYSQL_PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/mysql:/var/lib/mysql&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/docker-app/jms/my.cnf:/etc/mysql/conf.d/custom.cnf&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumpservernet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;redis&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis:3&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;redis_jms&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;always&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/redis:/data&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumpservernet&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;jumpserver&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;image&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;wojiushixiaobai/jumpserver:1.4.3&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;container_name&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jms_v1.4.3&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;restart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;always&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;depends_on&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;db&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;environment&lt;/span&gt;:
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_ENGINE&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;mysql&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_HOST&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;db&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_PORT&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_USER&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jumpserver&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_PASSWORD&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;123456&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;DB_NAME&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;jumpserver&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;REDIS_HOST&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;redis&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;REDIS_PORT&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;6379&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;ports&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;8080&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;2222&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;volumes&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/jms_data/jms:/opt/jumpserver/data&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/jms_data/coco_keys:/opt/coco/keys&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/jms_data/guacamole:/config/guacamole/keys&lt;/span&gt;
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/jumpserver-data/jms_data/mysql:/var/lib/mysql&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
      - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jumpservernet&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;networks&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;jumpservernet&lt;/span&gt;:
    &lt;span style=&#34;color:#f92672&#34;&gt;driver&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;bridge&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;故障排查&#34;&gt;故障排查&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;mysql问题(确认mysql编码正确)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show variables like &#39;character%&#39;;
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8                       |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | utf8                       |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;Docker的volume问题
如果不将docker定义的volume挂载出来，测试阶段会多出很多无用的volume，按照上面的配置就没问题，下面贴一个可以方便删除指定volume的命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker volume ls | grep local |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; |xargs docker volume rm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jumpserver/jumpserver&#34;&gt;Jumpserver官网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jumpserver/Dockerfile&#34;&gt;官方Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.jumpserver.org/zh/docs/dockerinstall.html&#34;&gt;官方docker安装推荐&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>博客迁移至阿里云</title>
      <link>http://blog.gourds.site/post/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Tue, 30 Oct 2018 18:23:45 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      
        <description>&lt;p&gt;之前博客使用的是搬瓦工的机器，感觉访问速度受限，刚好阿里云有活动，就决定迁移到阿里。鉴于之前一直没有一个好用的评论系统，迁移到阿里后进行了备案，开始使用畅言评论系统。
另外考虑到备份问题，也对部署方式进行了更新。&lt;/p&gt;
&lt;p&gt;迁移前：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前Blog的部署方式是：Hexo + VPS（git-hook） + Nginx（proxy）的形式，图床使用的七牛云。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;迁移后：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本地Hexo将Blog文件提交到Github
然后通过Github的Webhooks功能通知Ali服务器，服务器进行Git pull操作
Nginx使用Docker的方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接收Github通知需要一个HTTP服务器，没必要用太重的web框架，所以就自己写了一个简单的&lt;a href=&#34;https://github.com/Gourds/daily-scripts/blob/master/python-scripts/tools_github_hook.py&#34;&gt;【代码地址】&lt;/a&gt;，如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# Requier: pip install GitPython&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# http://note.qidong.name/2018/01/gitpython/&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; socket
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; threading
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; os
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; git
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; time




&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;init_socket&lt;/span&gt;():
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, HOST_NAME, HOST_PORT, MAX_CLIENT):
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;host_name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HOST_NAME
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;host_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; HOST_PORT
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ss &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;socket(socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;AF_INET, socket&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;SOCK_STREAM)
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bind((HOST_NAME, HOST_PORT))
        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listen(MAX_CLIENT)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(self, REMOTE_PATH, LOCAL_PATH):
        res_ok &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP/1.1 200 OK&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content-Type:text/html&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Server:myserver&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello, Gourds!&amp;#39;&lt;/span&gt;
        res_xx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HTTP/1.1 404 OK&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content-Type:text/html&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Server:myserver&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Friend!&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;:
            sock, addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ss&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;accept()
            print sock, addr
            request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv(&lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;)
            method &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]
            src &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
            print method, src
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; method &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; src &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/hook/push&amp;#39;&lt;/span&gt;:
                    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_ok
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(os&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;listdir(LOCAL_PATH)) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:
                        git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Repo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;clone_from(url&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;REMOTE_PATH, to_path&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;LOCAL_PATH)
                        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run clone command&amp;#34;&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                        gp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; git&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;cmd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Git(LOCAL_PATH)
                        gp&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;pull()
                        print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Run pull command&amp;#34;&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_xx
            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
                content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; res_xx
            print content
            sock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendall(content)
            print request
            sock&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;close()
            time&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;)


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    my_app &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; init_socket(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;18080&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    my_app&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;run(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git@project.git&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/path/to/nginx/&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>CentOS7安装配置supervisor</title>
      <link>http://blog.gourds.site/post/centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEsupervisor/</link>
      <pubDate>Thu, 30 Aug 2018 21:12:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEsupervisor/</guid>
      
        <description>&lt;p&gt;之前一直用AWS的服务，使用的也是AWS官方提供的系统镜像，感觉挺好使的，所以centos7的版本用的不多。最近刚好需要使用腾讯云，记录一下supervisor的安装配置，不管简单与否，好久没写博客了还是记录一下吧。
&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/12/20010101-emoticon-27.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Env：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OS: &lt;code&gt;CentOS Linux release 7.4.1708 (Core)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Python: &lt;code&gt;Python 2.7.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Pip: &lt;code&gt;pip 8.1.2 from /usr/lib/python2.7/site-packages (python 2.7)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Install supervisor with pip&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install python-pip &lt;span style=&#34;color:#75715e&#34;&gt;#8.1.2-6.el7&lt;/span&gt;
pip install supervisor &lt;span style=&#34;color:#75715e&#34;&gt;#meld3-1.0.2 supervisor-3.3.4&lt;/span&gt;
supervisord -v
&lt;span style=&#34;color:#75715e&#34;&gt;#Install supervisor&lt;/span&gt;
mkdir /etc/supervisor
echo_supervisord_conf  &amp;gt; /etc/supervisor/supervisord.conf
cat /etc/supervisor/supervisord.conf |egrep -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;^&lt;/span&gt;$&lt;span style=&#34;color:#e6db74&#34;&gt;|^;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Create supervisor config file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Support systemd&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl --version &lt;span style=&#34;color:#75715e&#34;&gt;#systemd 219&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Support systemd&lt;/span&gt;
wget https://raw.githubusercontent.com/zokeber/supervisor-systemd/master/etc/systemd/system/supervisord.service -O /etc/systemd/system/supervisord.service
&lt;span style=&#34;color:#75715e&#34;&gt;#Download systemd config for supervisor.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#https://github.com/Supervisor/initscripts&lt;/span&gt;
systemctl status supervisord
&lt;span style=&#34;color:#75715e&#34;&gt;#Now can use systemctl command to manage supervisor service&lt;/span&gt;
systemctl start supervisord &lt;span style=&#34;color:#75715e&#34;&gt;#{start|stop|restart|reload}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Start service&lt;/span&gt;
systemctl list-unit-files | grep supervisor
&lt;span style=&#34;color:#75715e&#34;&gt;#检查所有服务开机启动状态并过滤指定服务&lt;/span&gt;
systemctl enable supervisord
&lt;span style=&#34;color:#75715e&#34;&gt;#添加服务到开机自启动&lt;/span&gt;
systemctl is-enabled supervisord
&lt;span style=&#34;color:#75715e&#34;&gt;#查询指定服务开机启动状态&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tip:&lt;/strong&gt; &lt;code&gt;supervisord.service&lt;/code&gt;文件如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Supervisor process control system for UNIX&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Documentation&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;http://supervisord.org&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;network.target&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStop&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/supervisorctl $OPTIONS shutdown&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecReload&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/bin/supervisorctl $OPTIONS reload&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;KillMode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;process&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;on-failure&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;RestartSec&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;50s&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tip：&lt;/strong&gt; 主配置&lt;code&gt;/etc/supervisor/supervisord.conf&lt;/code&gt;示例(参考Flowsnow的博客及官方文档)&lt;a href=&#34;https://github.com/Gourds/daily-scripts/blob/master/ansible-playbook/roles/supervisor/templates/supervisord.conf.j2&#34;&gt;【**附：**我的配置】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[unix_http_server]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/supervisor.sock ;socket文件路径&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;chmod=0700                 ; socket 文件 模式 (默认 0700)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;chown=nobody:nogroup       ; socket file uid:gid owner&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;username=user              ; 使用supervisorctl连接的用户,默认没有用户&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;password=123               ; 使用supervisorctl连接的用户密码,默认没有密码&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[inet_http_server]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;port&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;172.21.0.4:9001 ;Web Server和远程的supervisorctl配置，默认关闭&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;username&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;user123 ;登录用户，默认没有&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;password123 ;用于登录密码，默认没有&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[supervisord]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;logfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/supervisord.log ;supervisord进程的日志路径&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;logfile_maxbytes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;100MB ;supervisor单个日志的大小，默认为50M&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;logfile_backups&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;20 ;日志文件的个数，默认为10个&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;loglevel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;info ;日志级别，默认info {trace|info|warn|debug}&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pidfile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/supervisord.pid ;supervisor的pid文件路径&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;nodaemon&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;false ;默认为false在后台运行，改为true即在前台运行&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;minfds&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;20000 ;系统最少有的空闲文件描述符，低于这个值supervisor不会启动，另外跟最大文件句柄数相关&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;minprocs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;200 ;最小可用的进程描述符，低于这个值supervisor将不会正常启动&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[rpcinterface:supervisor]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;给XML_RPC用的，要使用supervisord或者web server必须要开启&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[supervisorctl]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;serverurl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;unix:///tmp/supervisor.sock ;supervisorctl本地连接supervisord，使用本地UNIX socke&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;[program:theprogramname]      ; 指定管理服务的名称&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/tail -f  /etc/fstab            ; 要执行的进程，可以带参数，不能是守护进程&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;process_name=%(program_name)s ; numprocs参数为1时，就不用管这个参数 默认值%(program_name)s也就是上面的那个program冒号后面的名字&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;numprocs=1                    ; 启动进程的数目。当不为1时，就是进程池的概念，默认为1&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tmp                ; 进程运行前，会前切换到这个目录&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;autostart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;true                ; 设置为true 子进程将在supervisord启动后被自动启动，默认为true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;startretries&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3                ; 进程启动失败后，最大尝试启动的次数 当超过3次后，supervisor将把此进程的状态置为FAIL&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;autorestart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unexpected        ; 设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。默认为unexpected&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;exitcodes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0,2                 ; 注意和上面的的autorestart=unexpected对应 exitcodes里面的定义的退出码是expected的。&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stopsignal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;QUIT               ; 进程停止信号，可以为TERM, HUP, INT, QUIT, KILL, USR1, or USR2等信号 默认为TERM 当用设定的信号去杀掉进程，退出码会被认为是expected&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stopwaitsecs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;10               ; 这个是当我们向子进程发送stopsignal信号后，到系统返回信息给supervisord，所等待的最大时间。 超过这个时间，supervisord会向该子进程发送一个强制kill的信号(默认10秒)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stopasgroup=false             ; 这个东西主要用于，supervisord管理的子进程，这个子进程本身还有子进程 那么我们如果仅仅干掉supervisord的子进程的话，子进程的子进程有可能会变成孤儿进程 所以咱们可以设置这个选项，把整个该子进程的整个进程组都干掉  设置为true的话，一般killasgroup也会被设置为true 该选项发送的是stop信号(def false)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;killasgroup=false             ; 这个和上面的stopasgroup类似，不过发送的是kill信号(def false)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;chrism                   ; 如果supervisord是root启动，我们在这里设置这个非root用户，可以用来管理该program 默认不设置&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;redirect_stderr=true          ; 为true，则stderr的日志会被写入stdout日志文件中 (default false)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout_logfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/a/path        ; 子进程的stdout的日志路径，可以指定路径，AUTO，none等三个选项 设置为none的话，将没有日志产生。设置为AUTO的话，将随机找一个地方成日志文件，而且当supervisord重新启动的时候，以前的日志文件会被清空。当 redirect_stderr=true的时候，sterr也会写进这个日志文件&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout_logfile_maxbytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;100MB   ; 日志文件最大大小，和[supervisord]中定义的一样 (default 50MB)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stdout_logfile_backups=10     ; 和[supervisord]定义的一样 (0 means none, default 10)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stdout_capture_maxbytes=1MB   ; 这个东西是设定capture管道的大小，当值不为0的时候，子进程可以从stdout发送信息，而supervisor可以根据信息，发送相应的event  (default 0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stdout_events_enabled=false   ; 为ture的时候，当子进程由stdout向文件描述符中写日志的时候，将触发supervisord发送PROCESS_LOG_STDOUT类型的event(default false)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stderr_logfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/a/path        ; 设置stderr写的日志路径，当redirect_stderr=true。这个就不用设置了，设置了也是白搭。因为它会被写入stdout_logfile的同一个文件中 default AUTO(随便找个地存，supervisord重启被清空)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stderr_logfile_maxbytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1MB   ; max # logfile bytes b4 rotation (default 50MB)&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stderr_logfile_backups&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;10     ; # of stderr logfile backups (default 10)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stderr_capture_maxbytes=1MB   ; number of bytes in &amp;#39;capturemode&amp;#39; (default 0)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;stderr_events_enabled=false   ; emit events on stderr writes (default false)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;environment=A=&amp;#34;1&amp;#34;,B=&amp;#34;2&amp;#34;       ; 这个是该子进程的环境变量，和别的子进程是不共享的&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;serverurl=AUTO                ; override serverurl computation (childutils)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;[group:thegroupname]          ; 给programs分组，划分到组里面的program。我们就不用一个一个去操作了 我们可以对组名进行统一的操作。 注意：program被划分到组里面之后，就相当于原来的配置从supervisor的配置文件里消失了supervisor只会对组进行管理，而不再会对组里面的单个program进行管理了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;programs=progname1,progname2  ; 组成员，用逗号分开&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;;priority=999                  ; 优先级，相对于组和组之间 (default 999)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;[include]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/etc/supervisord/conf.d/*.conf ;包含其他的程序配置文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tip：&lt;/strong&gt; 子服务配置&lt;code&gt;/etc/supervisor/conf.d/example1.conf&lt;/code&gt;示例(即上面的program配置项可以提取到单独文件)&lt;a href=&#34;https://github.com/Gourds/daily-scripts/blob/master/ansible-playbook/roles/supervisor/templates/program_example.j2&#34;&gt;【**附：**我的配置】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[program:example1]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;command&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/tail -f 121&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tmp&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;arvon&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout_logfile&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/tmp/example1.log&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout_logfile_maxbytes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;100MB&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stdout_logfile_backups&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;redirect_stderr&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;autostart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;autorestart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;unexpected&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;exitcodes&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0,2&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stopsignal&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;QUIT&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stopwaitsecs&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意点（踩坑）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;supervisord中参数minfds和minprocs决定了supervisord进程及其守护的子进程的Max Processes及Max open files，并且这个limit限制不受系统ulimit所影响&lt;/li&gt;
&lt;li&gt;supervisord守护的子进程无法在supervisord配置文件中单独修改minfds和minprocs这两个参数。下面红色部分的配置是无效的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;以上截取自旺仔牛奶Blog的结论&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;附centos7与centos6对比&#34;&gt;附：CentOS7与CentOS6对比&lt;/h3&gt;
&lt;p&gt;CentOS7并没有在生产环境大量使用，刚好可以利用这次线上测试的机会稍微总结下
&lt;strong&gt;主要区别大致包含以下几个方面：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础命令&lt;/li&gt;
&lt;li&gt;内核版本（2.x和3.x）&lt;/li&gt;
&lt;li&gt;文件系统（ext4和xfs）&lt;/li&gt;
&lt;li&gt;安全系统（防火墙）&lt;/li&gt;
&lt;li&gt;服务管理（service和systemctl）&lt;/li&gt;
&lt;li&gt;新增特性（虚拟化、性能管理、身份管理、网络管理等）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;建议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用Docker建议使用系统版本&amp;gt;=7.4，7.2印象中之前测试有关于cgroup的坑，另外啰嗦一个下Docker对内核版本的要求是至少3.8;目前官方推荐大于3.10&lt;a href=&#34;https://docs.docker.com/engine/docker-overview/#the-underlying-technology&#34;&gt;【官网地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;看到&lt;a href=&#34;https://blog.csdn.net/xu_Melon/article/details/79043898&#34;&gt;【CSDN上的一篇Blog】&lt;/a&gt;里面介绍了一些命令的不同，我也懒得总结了&lt;/li&gt;
&lt;li&gt;还是看这个好&lt;a href=&#34;https://wiki.centos.org/Manuals/ReleaseNotes&#34;&gt;【CentOS官方ReleaseNote】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;参考文档&#34;&gt;参考文档&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://supervisord.org/installing.html&#34;&gt;【Supervisor官方文档】&lt;/a&gt;
&lt;a href=&#34;http://flowsnow.net/2017/09/25/%E8%AF%A6%E8%A7%A3supervisor%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/&#34;&gt;【Flowsnow的Blog】&lt;/a&gt;
&lt;a href=&#34;http://www.madown.com/2017/05/25/supervisor%E4%B8%AD%E7%9A%84minfds%E5%8F%8Aminprocs%E5%8F%82%E6%95%B0%E7%94%A8%E9%80%94/&#34;&gt;【旺仔牛奶的Blog】&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Elasticsearch使用curator管理index</title>
      <link>http://blog.gourds.site/post/es%E4%BD%BF%E7%94%A8curator%E7%AE%A1%E7%90%86index/</link>
      <pubDate>Wed, 01 Aug 2018 12:11:16 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/es%E4%BD%BF%E7%94%A8curator%E7%AE%A1%E7%90%86index/</guid>
      
        <description>&lt;p&gt;有个管理ES index的需求，感觉使用curl调用HTTP接口很不方便也不是很科学。在Github上一查，果然有官方提供的工具&lt;code&gt;curator&lt;/code&gt;，这个工具不仅仅满足了我简单管理的需要（索引的关闭、打开、段合并、删除等），也为以后的扩展提供了新的解决方案（支持磁盘占用触发）,非常不错。以下记录我的调研测试过程。另外补充一句&lt;code&gt;curator&lt;/code&gt;的官方文档十分完备，如喜欢直接阅读官方文档可以直接跳到本文底部，那里有官方文档链接。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;官方提供了多种安装途径（pip、yum、SourceCode、Docker），支持Unix及Windows平台。由于安装需要python3.x环境且我使用的是AWS的ec2实例，感觉使用源码或yum的方式管理维护不太方便，所以决定使用Docker方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地环境&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# cat /etc/issue&lt;/span&gt;
Amazon Linux AMI release 2017.03
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;安装Docker环境&amp;amp;下载源代码&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install docker
/etc/init.d/docker start
&lt;span style=&#34;color:#75715e&#34;&gt;#Install and start docker service&lt;/span&gt;
mkdir -pv /data/ES-curator&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;cd  /data/ES-curator
wget https://github.com/elastic/curator/archive/v5.5.4.zip &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip v5.5.4.zip
&lt;span style=&#34;color:#75715e&#34;&gt;#Download curator source code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;简单升级DockerFile&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM python:3.6-alpine3.6 as builder
RUN apk --no-cache add build-base tar musl-utils openssl-dev
RUN pip3 install setuptools cx_Freeze&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;6.0b1 requests-aws4auth boto3
COPY . .
RUN ln -s /lib/libc.musl-x86_64.so.1 ldd
RUN ln -s /lib /lib64
RUN pip3 install -r requirements.txt
RUN python3 setup.py build_exe
FROM alpine:3.6
ENV CURATOR_CONFIG_HOME /data/curator-config
RUN apk --no-cache upgrade &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk --no-cache add ca-certificates  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CURATOR_CONFIG_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
COPY --from&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;builder build/exe.linux-x86_64-3.6 /curator/
VOLUME &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CURATOR_CONFIG_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
USER root:root
ENTRYPOINT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/curator/curator&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;构建Docker镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cd curator-5.5.4/ &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker build -t curator:v5.5.4 .
&lt;span style=&#34;color:#75715e&#34;&gt;#build docker image from source code&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;配置文件（默认会使用&lt;code&gt;~/.curator/curator.yml&lt;/code&gt;，可以手动通过&lt;code&gt;--config&lt;/code&gt;参数指定。配置如下，更具体的文档可以查阅&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/configfile.html&#34;&gt;【官方】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
&lt;span style=&#34;color:#75715e&#34;&gt;# Remember, leave a key empty if there is no value.  None will be a string,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# not a Python &amp;#34;NoneType&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;client&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;hosts&lt;/span&gt;:
  &lt;span style=&#34;color:#75715e&#34;&gt;#填写ES的服务节点，可以只写一个节点，可以写成下面的形式，也可以写成[&amp;#39;host1&amp;#39;, &amp;#39;host2]这种形式&lt;/span&gt;
    - &lt;span style=&#34;color:#ae81ff&#34;&gt;x.x.x.x&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;port&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;9200&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#ES的端口&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;url_prefix&lt;/span&gt;: &lt;span style=&#34;color:#75715e&#34;&gt;#默认留空即可，使用域名的时候可以根据需求修改&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;use_ssl&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;certificate&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;client_cert&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;client_key&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;ssl_no_validate&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;http_auth&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;timeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;master_only&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;logging&lt;/span&gt;:
  &lt;span style=&#34;color:#f92672&#34;&gt;loglevel&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;INFO&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#记录log的级别&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;logfile&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;/data/curator-config/log/curator_%Y%m%d.log&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#log的输出设置，默认留空&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;logformat&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;default&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;blacklist&lt;/span&gt;: [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;elasticsearch&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;urllib3&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;#日志输出屏蔽的列表，按默认即可，这两个相关log输入太影响Debug&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用docker对index进行管理&#34;&gt;使用Docker对Index进行管理&lt;/h4&gt;
&lt;p&gt;由于直接测试写的文档，也没有什么高深的技术，有兴趣可移步到我的&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/elasticsearch_curator/cuator_config&#34;&gt;Github&lt;/a&gt;。里面有测试使用的例子（包括打开索引、关闭索引、段合并以及删除索引）&lt;/p&gt;
&lt;p&gt;自己写了一个简单的启动脚本，由于比较长也没什么营养，感兴趣的可以看&lt;a href=&#34;https://github.com/Gourds/docker-image/blob/master/Service/elasticsearch_curator/cuator_config/curator-manage-index&#34;&gt;【这里】&lt;/a&gt;
使用我这个脚本，然后再服务器上进行设置定时任务运行,当需要单独执行某个操作时候这种管理方式可能方便些。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#crontab -e&lt;/span&gt;
&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; * * * service curator-manage-index cron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;使用命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/close_index_rule.yml
&lt;span style=&#34;color:#75715e&#34;&gt;#关闭索引&lt;/span&gt;
docker run -d --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/delete_index_rule.yml
&lt;span style=&#34;color:#75715e&#34;&gt;#删除索引&lt;/span&gt;
docker run -d --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/merge_index_rule.yml
&lt;span style=&#34;color:#75715e&#34;&gt;#段合并&lt;/span&gt;
docker run -d --rm -v /data/ES-curator/curator-config/:/data/curator-config curator:v5.5.4 --config /data/curator-config/curator.yml /data/curator-config/open_index_rule.yml
&lt;span style=&#34;color:#75715e&#34;&gt;#打开索引&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;补充配置说明&#34;&gt;补充配置说明&lt;/h3&gt;
&lt;p&gt;上面记录了我使用中需求的具体示例，还有一些配置选项没有进行说明，就简单介绍下curator可以对Index进行哪些操作，以及常见具体操作时的参数选项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/alias.html&#34;&gt;【Alias】&lt;/a&gt; 这个操作可以通过别名添加或删除索引&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/allocation.html&#34;&gt;【Allocation】&lt;/a&gt;更改选定索引的分片路由分配&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/close.html&#34;&gt;【Close】&lt;/a&gt;关闭选定索引，可以节省内存&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/cluster_routing.html&#34;&gt;【Cluster Routing】&lt;/a&gt;更改选定索引的分片路由分配&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/create_index.html&#34;&gt;【Create Index】&lt;/a&gt;创建索引&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_indices.html&#34;&gt;【Delete Index】&lt;/a&gt;删除过滤筛选出的索引&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/delete_snapshots.html&#34;&gt;【DeleteSnapshots】&lt;/a&gt;从选定的存储库中删除选定的快照&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/forcemerge.html&#34;&gt;【forceMerge】&lt;/a&gt;将过滤选定的索引按照配置进行强制合并&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index_settings.html&#34;&gt;【Index Settings】&lt;/a&gt;更新选中的index的设置&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/open.html&#34;&gt;【Open】&lt;/a&gt;打开选定索引&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/reindex.html&#34;&gt;【Reindex】&lt;/a&gt;对index进行重新索引，有很多选项，具体看官网&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/replicas.html&#34;&gt;【Replicas】&lt;/a&gt;此操作将每个shard的副本数设置为count值&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/restore.html&#34;&gt;【Restore】&lt;/a&gt;从快照中恢复index&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/rollover.html&#34;&gt;【Rollover】&lt;/a&gt;对满足任何描述条件的索引使用弹性搜索滚动API创建新索引&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/shrink.html&#34;&gt;【Shrink】&lt;/a&gt;缩小索引，不过需要满足多个条件，具体参照文档&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/snapshot.html&#34;&gt;【Snapshot】&lt;/a&gt;对选定索引创建快照&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;选取indexfilters&#34;&gt;选取Index（Filters）&lt;/h4&gt;
&lt;p&gt;使用filters进行筛选需要操作的index。虽然过滤器可以链接，但是每个过滤器都通过隐含的逻辑AND操作链接。如果想从几个不同的模式中匹配，就像用逻辑或运算一样，可以用模式过滤器类型使用正则表达式来匹配。&lt;/p&gt;
&lt;p&gt;操作筛选操作分为两部分（索引以及镜像），这里只对Index的过滤选项进行介绍，更多可以参照&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/filters.html&#34;&gt;【官方】&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#支持正则进行多个index的匹配&lt;/span&gt;
  filters:
  - filtertype: pattern
    kind: regex
    value: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;^(alpha-|bravo-|charlie-).*$&amp;#39;&lt;/span&gt;
  - filtertype: age &lt;span style=&#34;color:#75715e&#34;&gt;#按时间进行筛选index&lt;/span&gt;
    source: creation_date
    direction: older
    unit: days
    unit_count: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/elastic/curator&#34;&gt;【Github地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/client/curator/current/index.html&#34;&gt;【官方文档】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;</description>
      
    </item>
    
    <item>
      <title>Bitbucket实践</title>
      <link>http://blog.gourds.site/post/bitbucket%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 09 Jun 2018 12:38:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/bitbucket%E5%AE%9E%E8%B7%B5/</guid>
      
        <description>&lt;p&gt;前言：之前使用了Atlassian公司的Confluence和Jira，现在新项目考虑使用Bitbucket做代码仓库，这里记录一下调研实践过程。由于之前的服务是使用docker进行部署的，所以Bitbucket也决定使用docker的方式进行部署。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;update:&lt;/strong&gt;
2018-06-12: 添加备份还原文档，文档在&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/bitbucket/backup-restore&#34;&gt;【这里】&lt;/a&gt;，就不单独在放Blog了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;p&gt;使用Docker的方式，由于Bitbucket基于性能的考虑不推荐使用mysql(&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/connecting-bitbucket-server-to-mysql-776640382.html&#34;&gt;参考&lt;/a&gt;)，所以最后根据推荐决定使用PostgreSQL，以下是编写的docker-compose,可以在&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/bitbucket&#34;&gt;【Github】&lt;/a&gt;进行查看和建议。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;postgresql:
  image: sameersbn/postgresql:9.4-3
  environment:
    - DB_USER=YourUserName
    - DB_PASS=YourPassword
    - DB_NAME=YourDatabaseName
  volumes:
    - /srv/docker/bitbucket/postgresql:/var/lib/postgresql
bitbucket:
  image: atlassian/bitbucket-server:5.0
  links:
    - postgresql:postgresql
  ports:
    - &amp;#34;80:7990&amp;#34;
    - &amp;#34;7999:7999&amp;#34;
  environment:
    - &amp;#39;BITBUCKET_PROXY_NAME=&amp;#39;
    - &amp;#39;BITBUCKET_PROXY_PORT=&amp;#39;
    - &amp;#39;BITBUCKET_PROXY_SCHEME=&amp;#39;
    - &amp;#39;BITBUCKET_DELAYED_START=&amp;#39;
  volumes:
    - /srv/docker/bitbucket/app-data:/var/atlassian/application-data/bitbucket
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;备份及还原&#34;&gt;备份及还原&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Bitbucket&lt;/code&gt;的备份主要包括两部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;家目录：包括仓库数据、日志、插件等，具体参考&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/bitbucket-server-home-directory-776640890.html&#34;&gt;【官方说明】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;数据库：&lt;code&gt;which contains data about pull requests, comments, users, groups, permissions, and so on.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于备份官方提供了3种方式&lt;/p&gt;
&lt;p&gt;|类型|不停机备份|自定义备份|客户端备份|
|&amp;mdash;|&amp;mdash;|&amp;mdash;|
|概述|使用内部一致性数据库快照和数据块级别文件系统快照进行不停机备份|使用增量备份及云供应商的快照功能|使用外部程序锁定bitbucker服务器实例，并以独立于供应商的格式备份其整个主目录和数据库。使用简单但不适用与高可用环境|
|高可用|不影响服务|不可用时间短，只需要几秒钟短暂锁定存储桶就可以创建一致的快照|不可用时间长。bitbucket在整个备份过程中被锁定，这可能需要几分钟或更长时间，特别是在大型组织中|
|版本支持|Bitbucket 4.8+|Bitbucket 4.0+ &amp;amp;&amp;amp; Stash 2.12+|Bitbucket 4.0+ &amp;amp;&amp;amp; Stash2.7+|
|文档|&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/using-bitbucket-zero-downtime-backup-829920023.html&#34;&gt;【DOC】&lt;/a&gt;|&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/using-bitbucket-server-diy-backup-776640056.html&#34;&gt;【DOC】&lt;/a&gt;|&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/using-the-bitbucket-server-backup-client-776640064.html&#34;&gt;【DOC】&lt;/a&gt;|&lt;/p&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/atlassian/docker-atlassian-bitbucket-server&#34;&gt;【官方Docker参考】&lt;/a&gt;
&lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/data-recovery-and-backups-776640050.html&#34;&gt;【官方备份说明】&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Etcd的v3版本常用操作及可视化</title>
      <link>http://blog.gourds.site/post/etcd%E7%9A%84v3%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Tue, 24 Apr 2018 17:00:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/etcd%E7%9A%84v3%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      
        <description>&lt;p&gt;简单记录一下&lt;code&gt;Etcd API v3&lt;/code&gt;版本的基本操作和可视化&lt;code&gt;WEB UI&lt;/code&gt;使用，关于V2的使用可以看我之前的一篇介绍&lt;a href=&#34;http://arvon.top/tags/%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/&#34;&gt;【etcd v2】&lt;/a&gt;。Etcd v2 和 v3 本质上是共享同一套 raft 协议代码的两个独立的应用，接口不一样，存储不一样，数据也是互相隔离的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;V3相对V2的一些主要变化：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口通过grpc提供rpc接口，放弃了v2的http接口。优势是长连接效率提升明显，缺点是使用不如以前方便，尤其对不方便维护长连接的场景。&lt;/li&gt;
&lt;li&gt;废弃了原来的目录结构，变成了纯粹的kv，用户可以通过前缀匹配模式模拟目录&lt;/li&gt;
&lt;li&gt;内存中不再保存value，同样的内存可以支持存储更多的key&lt;/li&gt;
&lt;li&gt;watch机制更稳定，基本上可以通过watch机制实现数据的完全同步&lt;/li&gt;
&lt;li&gt;提供了批量操作以及事务机制，用户可以通过批量事务请求来实现Etcd v2的CAS机制（批量事务支持if条件判断）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&amp;ndash;以上摘自王渊命的文章[侵删]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;使用etcdctl管理&#34;&gt;使用Etcdctl管理&lt;/h4&gt;
&lt;p&gt;这里列下我常用的，其他选项可以查看help或者官网说明，链接在最后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl put mykey &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;this is awesome&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#设置&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl get mykey &lt;span style=&#34;color:#75715e&#34;&gt;#获取&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl del mykey &lt;span style=&#34;color:#75715e&#34;&gt;#删除&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; --from-key  &lt;span style=&#34;color:#75715e&#34;&gt;#获取所有的键值&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; --from-key --keys-only &lt;span style=&#34;color:#75715e&#34;&gt;#只获取所有的key不含value&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl get &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; --from-key --keys-only --limit &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#获取key只显示3个&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl get --prefix my &lt;span style=&#34;color:#75715e&#34;&gt;#获取所有以my开头的key及对应value&lt;/span&gt;
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl del my --prefix &lt;span style=&#34;color:#75715e&#34;&gt;#删除所有以my开头的键值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;使用http管理&#34;&gt;使用HTTP管理&lt;/h4&gt;
&lt;p&gt;HTTP接口没有怎么用，请参考&lt;a href=&#34;https://github.com/coreos/etcd/blob/master/Documentation/dev-guide/api_reference_v3.md&#34;&gt;【API】&lt;/a&gt;及&lt;a href=&#34;https://grpc.io/blog/coreos&#34;&gt;【grpc官方】&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -L http://localhost:2379/v3alpha/maintenance/status -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{}&amp;#39;&lt;/span&gt;
curl -L http://localhost:2379/v3alpha/kv/put -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;: &amp;#34;Zm9v&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;YmFy&amp;#34;}&amp;#39;&lt;/span&gt;
curl -L http://localhost:2379/v3alpha/kv/range -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;key&amp;#34;: &amp;#34;Zm9v&amp;#34;}&amp;#39;&lt;/span&gt;
curl -L http://localhost:2379/v3alpha/watch -X POST -d &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{&amp;#34;create_request&amp;#34;: {&amp;#34;key&amp;#34;: &amp;#34;Zm9v&amp;#34;}}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;注册脚本&#34;&gt;注册脚本&lt;/h4&gt;
&lt;p&gt;我提供的这个脚本主要是将本地目录中的文件以递归的形式注册到etcd上（文件内容是key=value有多行）。不贴具体的脚本了，可以从&lt;a href=&#34;https://github.com/Gourds/daily-scripts/blob/master/python-scripts/register-etcd-from-files.py&#34;&gt;【&amp;ndash;&amp;gt;这里&amp;lt;&amp;ndash;】&lt;/a&gt;获取，脚本主要功能如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Support configuration annotation&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Support for registering null values. like &amp;ldquo;value=&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Support for registration of recursive directories&lt;/li&gt;
&lt;li&gt;Add exception capture&lt;/li&gt;
&lt;li&gt;Add null file support&lt;/li&gt;
&lt;li&gt;Add null dircectory support&lt;/li&gt;
&lt;li&gt;Add etcd v3 api support&lt;/li&gt;
&lt;li&gt;Support e3w &lt;a href=&#34;https://github.com/soyking/e3w&#34;&gt;https://github.com/soyking/e3w&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要说两个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在V2中创建目录
这个主要使用ETCD的HTTP接口实现，可以直接创建目录，比用key-value的形式要好,V2的可视化，推荐&lt;a href=&#34;https://github.com/nikfoundas/etcd-viewer&#34;&gt;【Etcd-view】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在V3中创建目录
在V3中本并不存在目录的概念了，但是如果想要使用&lt;a href=&#34;https://github.com/soyking/e3w&#34;&gt;【E3W】&lt;/a&gt;实现可视化，需要使用特定的value给目录这个key。如下root_v3是个目录，它下面那个就是特定的value&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;[root@ip ops_user]# ETCDCTL_API=3 etcdctl get root_v3
root_v3
etcdv3_dir_$2H#%gRe3*t
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;权限机制&#34;&gt;权限机制&lt;/h4&gt;
&lt;p&gt;占位，之后根据需要补充&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;export ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
etcdctl user add root
etcdctl auth enable
etcdctl user list
ETCDCTL_API&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; etcdctl user add root --endpoints&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://10.17.1.32:2379&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;参考文档&#34;&gt;参考文档&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/coreos/etcd/tree/master/etcdctl&#34;&gt;【Etcd项目地址】&lt;/a&gt;
&lt;a href=&#34;https://github.com/coreos/etcd/blob/master/Documentation/dev-guide/api_grpc_gateway.md&#34;&gt;【Etcd API】&lt;/a&gt;
&lt;a href=&#34;http://www.10tiao.com/html/689/201612/2651576771/2.html&#34;&gt;【Etcd对比介绍】&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>Gitlab迁移升级记录</title>
      <link>http://blog.gourds.site/post/gitlab%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 21 Apr 2018 19:33:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/gitlab%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</guid>
      
        <description>&lt;p&gt;之前写了gitlab的安装文档，目的是为了为迁移做准备，现在记录一下测试迁移的过程。现在需要将编译安装的&lt;code&gt;7.13.4&lt;/code&gt;版本的gitlab升级至&lt;code&gt;10.6.0&lt;/code&gt;并采用docker的方式运行。经查阅官方Docker&lt;a href=&#34;https://hub.docker.com/r/gitlab/gitlab-ce/tags/&#34;&gt;【版本】&lt;/a&gt;是&lt;code&gt;9.5.1-10.7.0&lt;/code&gt;。而在Github上&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab&#34;&gt;【sameersbn版本】&lt;/a&gt;是&lt;code&gt;v6.1-v10.6.4&lt;/code&gt;。另外
还有Gitlab的&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/update&#34;&gt;【官方升级说明】&lt;/a&gt;,这个说明里面都是临近的版本升级说明，但并没有介绍大跨度升级的详细内容。最后决定采用github上提供的升级建议。记录说明如下&lt;/p&gt;
&lt;h3 id=&#34;迁移升级步骤&#34;&gt;迁移升级步骤&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;思路：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;**概览：**从7.13.4&amp;ndash;&amp;gt;8.0.3&amp;ndash;&amp;gt;10.6.0&lt;/p&gt;
&lt;p&gt;A. 先迁移至同版本的Docker容器中
B. 利用Docker易于部署的特性将Gitlab升级至指定版本
C. 使用了&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab&#34;&gt;【sameersbn提供的方法】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;拉取Docker版本的&lt;code&gt;7.13.4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;docker pull sameersbn/gitlab:7.13.4
&lt;span style=&#34;color:#75715e&#34;&gt;#docker pull sameersbn/gitlab:latest&lt;/span&gt;
cd docker-gitlab &lt;span style=&#34;color:#75715e&#34;&gt;#获取对应版本docker compose配置&lt;/span&gt;
git clone https://github.com/sameersbn/docker-gitlab.git
&lt;span style=&#34;color:#75715e&#34;&gt;#docker build --tag=$USER/gitlab .&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;使用docker-compose启动gitlab&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;pip install docker-compose
&lt;span style=&#34;color:#75715e&#34;&gt;#进入docker compose同级目录执行up命令&lt;/span&gt;
docker-compose up -d
&lt;span style=&#34;color:#75715e&#34;&gt;#docker-compose down&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;还原gitlab到7.13.4&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker ps -a
cp /gitlab_bak/1523732410_gitlab_backup.tar  /srv/docker/gitlab/gitlab/backups/ &lt;span style=&#34;color:#75715e&#34;&gt;#copy 备份数据到docker里backup目录&lt;/span&gt;
docker exec -it docker-gitlab_gitlab_1 /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;#进入容器&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#容器内部使用了supervisor 先停止gitlab服务&lt;/span&gt;
supervisor&amp;gt; stop sidekiq
sidekiq: stopped
supervisor&amp;gt; stop unicorn
unicorn: stopped
&lt;span style=&#34;color:#75715e&#34;&gt;#修改权限&lt;/span&gt;
chown -R git.git /home/git/
chown -R git.git /home/git/data/backups/1525501269_gitlab_backup.tar
chown -R git.git /var/log/gitlab/gitlab-shell/gitlab-shell.log
su git
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
bundle exec rake gitlab:check SANITIZE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#75715e&#34;&gt;#确认状态无误，导入需确认API和Running状态为关闭&lt;/span&gt;
bundle exec rake gitlab:backup:restore RAILS_ENV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;production &lt;span style=&#34;color:#75715e&#34;&gt;#还原操作&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;至此还原已经完成了，开始升级操作&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#每次升级之后做一下备份&lt;/span&gt;
sudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;production
&lt;span style=&#34;color:#75715e&#34;&gt;#使用compose更新版本&lt;/span&gt;
git branch
git checkout .
git  clean -df
git checkout v8.0.3
mv docker-compose.yml.dist docker-compose.yml
docker-compose up -d
&lt;span style=&#34;color:#75715e&#34;&gt;#backup again&lt;/span&gt;
docker-compose down
git checkout 10.6.0
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;特别说明&#34;&gt;特别说明&lt;/h3&gt;
&lt;p&gt;我这里最后并没有升级至10.6.0，最后决定使用原版本只是迁移到docker有两点需要注意&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.数据目录权限如果这个有问题会出现能看到repository的commit等信息，却提示repository不存在&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#更改repository所在目录的权限即可&lt;/span&gt;
chown -R git.git /home/git/data/repositories
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;2.迁移key,将原gitlab的auth key迁移到新gitlab的auth key位置，注意command&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;#提示：可以先手动创建一个就知道该如何写这个command了
原key：/var/opt/gitlab/.ssh/authorized_keys
command=&amp;quot;/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell key-58&amp;quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa A6dKlEgfVl3G16f5v test@bogon
现key：/home/git/data/.ssh/authorized_keys
command=&amp;quot;/home/git/gitlab-shell/bin/gitlab-shell key-59&amp;quot;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa A6dKlEgfVl3G16f5v test@bogon
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;官方建议&#34;&gt;官方建议&lt;/h3&gt;
&lt;p&gt;官方提供了3种Gitlab的安装方法，根据安装方法的不同需要选取不同的迁移升级策略。三种安装方式分别如下*【除了源码安装其他的安装方法在我之前的一篇&lt;a href=&#34;http://arvon.top/2018/04/14/Gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/&#34;&gt;博客&lt;/a&gt;里已经记录了】*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Omnibus Packages&lt;/li&gt;
&lt;li&gt;Source installation&lt;/li&gt;
&lt;li&gt;Docker installation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关于如何还原备份&lt;/strong&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore&#34;&gt;【文档地址】&lt;/a&gt;
主要参照官方吧，我这里不再详细说了。简单记录一点我看到的
从9.1.0版本开始满足以下条件可以实现升级到新版本而不必停止Gitlab服务&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只能一次升级一个小版本，如：9.1到9.2，不能9.1到9.3&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;从9.2.开始备份文件的时间戳发生了变化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In GitLab 9.2 the timestamp format was changed from EPOCH_YYYY_MM_DD to EPOCH_YYYY_MM_DD_GitLab version, for example 1493107454_2017_04_25 would become 1493107454_2017_04_25_9.1.0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他意见&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用Omnibus Packages时&lt;a href=&#34;https://docs.gitlab.com/omnibus/update/README.html&#34;&gt;【文档】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;采用Source installation时&lt;a href=&#34;https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore-for-installation-from-source&#34;&gt;【文档】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;故障排除&#34;&gt;故障排除&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;官方还原文档&lt;a href=&#34;https://docs.gitlab.com/ee/raketasks/backup_restore.html#restore&#34;&gt;【建议】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;参考官方&lt;a href=&#34;https://docs.gitlab.com/ee/raketasks/backup_restore.html#troubleshooting&#34;&gt;【Troubleshooting】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;合理运用命令&lt;code&gt;bundle exec rake gitlab:check SANITIZE=true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
      
    </item>
    
    <item>
      <title>Gitlab搭建使用记录</title>
      <link>http://blog.gourds.site/post/gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 14 Apr 2018 20:54:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      
        <description>&lt;p&gt;Gitlab有迁移升级的打算，尝试下新版本（10.6.4)顺带记录一下过程。我这里尝试两种安装方法，一种是Omnibus包安装（官方推荐），另一种会尝试Docker。
操作之前看一把架构图,图片来自官方,侵删
&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/12/20180413-gitlab-1.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;使用omnibus安装centos7&#34;&gt;使用Omnibus安装（centos7）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基础环境配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install -y curl policycoreutils-python openssh-server
systemctl enable sshd
systemctl start sshd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;IPtables配置（不需要的话直接跳过）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl start firewalld
firewall-cmd --permanent --add-service&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http
systemctl reload firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;邮件服务器安装及配置（如有自己的邮件服务器跳过postfix安装，直接配置SMTM服务器即可）
具体配置就不写了，可以参照廖雪峰的&lt;a href=&#34;https://www.liaoxuefeng.com/article/00137387674890099a71c0400504765b89a5fac65728976000&#34;&gt;【文章】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install postfix
systemctl enable postfix
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^inet_interfaces = .*/inet_interfaces = 127.0.0.1/g&amp;#39;&lt;/span&gt; /etc/postfix/main.cf
&lt;span style=&#34;color:#75715e&#34;&gt;#if no sed will report an error like &amp;#34;fatal: parameter inet_interfaces: no local interface found for&amp;#34;&lt;/span&gt;
systemctl start postfix
&lt;span style=&#34;color:#75715e&#34;&gt;#config   #使用已有的邮件服务器，这个不写了&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#useradd -m -s /bin/bash arvon #创建邮件用户&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#echo &amp;#34;123456&amp;#34; | passwd --stdin arvon #设置密码&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#telnet localhost 25 #测试主机邮件端口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装gitlab&#34;&gt;安装gitlab&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;添加Gitlab安装源及安装gitlab&lt;/strong&gt;
既然选择了gitlab一部分原因也是因为开源，所以用免费的CE就行，关于&lt;a href=&#34;https://www.gitlab.com.cn/products/&#34;&gt;【CE和EE的区别】&lt;/a&gt;另外可以使用国内的镜像源来提升安装速度，如&lt;a href=&#34;https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/&#34;&gt;【清华镜像站】&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#EXTERNAL_URL=&amp;#34;http://193.112.135.23&amp;#34; yum install -y gitlab-ee #IP地址填写期望访问的URL地址&lt;/span&gt;
EXTERNAL_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://193.112.135.23&amp;#34;&lt;/span&gt; yum install -y gitlab-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里安装的版本&lt;code&gt;gitlab-ce-10.6.4-ce.0.el7.x86_64&lt;/code&gt;
在RHEL/CentOS上可以新建yum源&lt;code&gt;/etc/yum.repos.d/gitlab-ce.repo&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;[gitlab-ce]
name=Gitlab CE Repository
baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;安装完成后自己就启动了，十分智能，WEB服务端口默认是&lt;code&gt;80&lt;/code&gt;，还是看看安装在哪了都有哪些路径&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@VM_0_11_centos gitlab]# rpm -qa |grep  gitlab-ce |xargs rpm -ql |wc -l
81091
[root@VM_0_11_centos gitlab]# rpm -qa |grep  gitlab-ce |xargs rpm -ql |grep /opt/gitlab |wc -l
81090
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可见装了这么多东西，都在&lt;code&gt;/opt/gitlab&lt;/code&gt;下&lt;/p&gt;
&lt;h4 id=&#34;配置gitlab及组件说明&#34;&gt;配置gitlab及组件说明&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置gitlab
访问&lt;code&gt;http://193.112.135.23:80/&lt;/code&gt;会提示你重置密码，重置密码后用&lt;code&gt;root&lt;/code&gt;和你重置后的密码就可以登录了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Gitlab相关路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;/opt/gitlab #Gitlab安装位置
/etc/gitlab/gitlab.rb #Gitlab主要配置文件
/var/opt/gitlab/git-data/repositories/ #代码仓库保存位置
/var/opt/gitlab/backups/ #代码仓库备份位置
/var/log/gitlab/ #日志位置
/var/opt/gitlab/postgresql/data/ #postgresql数据及配置目录
/var/opt/gitlab/redis #Redis配置目录
/var/opt/gitlab/gitlab-rails/etc/unicorn.rb  #unicorn配置文件
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;服务及进程作用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;nginx&lt;/strong&gt;
Web服务器,提供Httpweb浏览管理服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gitlab-shell&lt;/strong&gt;
处理一些git命令什么的&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unicorn&lt;/strong&gt;
Gitlab自身的WEB服务器，Ruby Web Server，托管 GitLab Rails 服务。增加 unicorn 的 workers 数量，可以减少应用的响应时间并提高处理并发请求的能力。对于大部分实例，建议的配置：CPU 核心数 + 1 = unicorn workers 数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gitlab-workhorse&lt;/strong&gt;
轻量级别代理服务器，用来处理大的 HTTP 请求，比如文件上传下载如Git Push/Pull ，其它请求会反向代理到 GitLab Rails 应用，即反向代理给后端的 unicorn&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gitaly&lt;/strong&gt;
RPC 服务，执行 gitlab-shell 和 gitloab-workhorse 的 git 操作，并向 GitLab web 应用程序提供一个 API，以从 git（例如 title, branches, tags, other meta data）获取属性，并获取 blob（例如 diffs，commits，files）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;postgresql&lt;/strong&gt;
使用PostgreSQL必须确认GitLab使用的数据库安装了&lt;code&gt;pg_trgm&lt;/code&gt;扩展。 这个扩展需要PostgreSQL使用root用户在GitLab每个数据库里面执行 &lt;code&gt;CREATE EXTENSION pg_trgm;&lt;/code&gt;命令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;redis&lt;/strong&gt;
Redis 存储每个客户端的sessions和后台任务队列。Redis需求的存储空间很小, 大约每个用户25kB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sidekiq&lt;/strong&gt;
Sidekiq使用多线程处理后台任务（异步）。这个进程启动的时候会使用整个Rails堆栈（200MB+），但是它会在内存泄漏的情况下增加。一个用户非常活跃的服务器上（10,000个活跃用户），Sidekiq进程会占用1GB+的内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logrotate&lt;/strong&gt;
日志文件管理&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Gitlab管理命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;/opt/gitlab/bin/gitlab-ctl status &lt;span style=&#34;color:#75715e&#34;&gt;#查看状态&lt;/span&gt;
/opt/gitlab/bin/gitlab-ctl stop
/opt/gitlab/bin/gitlab-ctl start
&lt;span style=&#34;color:#75715e&#34;&gt;#/opt/gitlab/bin/gitlab-ctl show-config #查看当前配置&lt;/span&gt;
/opt/gitlab/bin/gitlab-ctl help &lt;span style=&#34;color:#75715e&#34;&gt;#获取命令行帮助&lt;/span&gt;
cat /opt/gitlab/version-manifest.json | grep build_version &lt;span style=&#34;color:#75715e&#34;&gt;#查看版本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;安装及配置完成
现在可以在gitlab上创建项目、用户及用户组了。之后就可以正常使用了&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;附邮件配置&#34;&gt;附邮件配置&lt;/h4&gt;
&lt;p&gt;在主配置文件&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;如下修改，更详细的配置参考&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/smtp.html#smtp-settings&#34;&gt;【官方说明】&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;gitlab_rails[&amp;#39;smtp_enable&amp;#39;] = true
gitlab_rails[&amp;#39;smtp_address&amp;#39;] = &amp;#34;smtp.server&amp;#34;
gitlab_rails[&amp;#39;smtp_port&amp;#39;] = 465
gitlab_rails[&amp;#39;smtp_user_name&amp;#39;] = &amp;#34;smtp user&amp;#34;
gitlab_rails[&amp;#39;smtp_password&amp;#39;] = &amp;#34;smtp password&amp;#34;
gitlab_rails[&amp;#39;smtp_domain&amp;#39;] = &amp;#34;example.com&amp;#34;
gitlab_rails[&amp;#39;smtp_authentication&amp;#39;] = &amp;#34;login&amp;#34;
gitlab_rails[&amp;#39;smtp_enable_starttls_auto&amp;#39;] = true
gitlab_rails[&amp;#39;smtp_openssl_verify_mode&amp;#39;] = &amp;#39;peer&amp;#39;
# If your SMTP server does not like the default &amp;#39;From: gitlab@localhost&amp;#39; you
# can change the &amp;#39;From&amp;#39; with this setting.
gitlab_rails[&amp;#39;gitlab_email_from&amp;#39;] = &amp;#39;gitlab@example.com&amp;#39;
gitlab_rails[&amp;#39;gitlab_email_reply_to&amp;#39;] = &amp;#39;noreply@example.com&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;修改完成后通过命令&lt;code&gt;/opt/gitlab/bin/gitlab-ctl reconfigure&lt;/code&gt;使配置生效&lt;/p&gt;
&lt;h3 id=&#34;使用docker安装gitlab&#34;&gt;使用Docker安装Gitlab&lt;/h3&gt;
&lt;p&gt;按照官网来了一遍，主要注意以下3点,更详细可以参考&lt;a href=&#34;https://docs.gitlab.com/omnibus/docker/&#34;&gt;【Docker Install Guide地址】&lt;/a&gt;和&lt;a href=&#34;https://gitlab.com/gitlab-org/omnibus-gitlab/tree/master/docker&#34;&gt;【Docker File地址:】 &lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;端口配置，可以参照以下命令，注意不要和宿主机冲突&lt;/li&gt;
&lt;li&gt;hostname参数,这个hostname类似手动装的那个配置，会在pull库时候用就是上面显示的那个连接&lt;/li&gt;
&lt;li&gt;客户端再pull代码的时候命令需要改成&lt;code&gt;git clone ssh://git@host:port/your-project.git&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;启动命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --detach &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --hostname 12.13.14.13 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --publish 443:443 --publish 18080:80 --publish 222:22 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --env &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GITLAB_PORT=18080&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --env &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GITLAB_SHELL_SSH_PORT=222&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --env &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;GITLAB_SSH_PORT=222&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --name gitlab &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --restart always &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --volume /srv/gitlab/config:/etc/gitlab &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --volume /srv/gitlab/logs:/var/log/gitlab &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    --volume /srv/gitlab/data:/var/opt/gitlab &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    gitlab/gitlab-ce:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;客户端连接命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone ssh://git@12.13.14.13:222/root/arvon-test.git
touch demo.txt
git add .
git config --global user.email &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arvon@gourds.com&amp;#34;&lt;/span&gt;
git config --global user.name &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arvon&amp;#34;&lt;/span&gt;
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;add test&amp;#39;&lt;/span&gt;
git push origin master &lt;span style=&#34;color:#75715e&#34;&gt;#推远端&lt;/span&gt;
cat .git/config &lt;span style=&#34;color:#75715e&#34;&gt;#查看git配置&lt;/span&gt;
git pull &lt;span style=&#34;color:#75715e&#34;&gt;#拉代码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;gitlab备份还原centos7&#34;&gt;Gitlab备份还原（CentOS7）&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;关于备份的官方说明&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;You can only restore a backup to exactly the same version and type (CE/EE) of GitLab on which it was created. The best way to migrate your repositories from one server to another is through backup restore.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果是通过源码安装，需要确保自己安装了rsync服务,可以通过&lt;code&gt;yum install -y rsync&lt;/code&gt;安装&lt;/li&gt;
&lt;li&gt;备份配置可以在主配置文件&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;中&lt;code&gt;Backup Settings&lt;/code&gt;选项下修改，一般不需修改&lt;/li&gt;
&lt;li&gt;推荐备份&lt;code&gt;/etc/gitlab&lt;/code&gt;这个目录，如果使用了&lt;code&gt;two-factor&lt;/code&gt;至少要备份&lt;code&gt;/etc/gitlab/gitlab-secrets.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;注意&lt;code&gt;8.17&lt;/code&gt;之后的版本，这个版本&lt;a href=&#34;https://docs.gitlab.com/ce/raketasks/backup_restore.html#backup-strategy-option&#34;&gt;【详情描述】&lt;/a&gt;引入了新的备份策略&lt;code&gt;COPY&lt;/code&gt;可以解决备份过程中由于数据快速变化而导致备份过程失败这个问题，可以通过&lt;code&gt;gitlab-rake gitlab:backup:create STRATEGY=copy&lt;/code&gt;在执行备份的时候指定，不过需要占用额外的1X磁盘。&lt;/li&gt;
&lt;li&gt;如果想有选择的备份Project，可以参照&lt;a href=&#34;https://docs.gitlab.com/ce/raketasks/backup_restore.html#excluding-specific-directories-from-the-backup&#34;&gt;【官方说明】&lt;/a&gt;配置&lt;/li&gt;
&lt;li&gt;使用AWS服务的话推荐使用S3，可以参照&lt;a href=&#34;https://docs.gitlab.com/ce/raketasks/backup_restore.html#uploading-backups-to-a-remote-cloud-storage&#34;&gt;【官方说明】&lt;/a&gt;配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;配置备份还原&#34;&gt;配置备份还原&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;配置backup&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;umask 0077; tar -cf $(date &amp;#34;+etc-gitlab-%s.tar&amp;#34;) -C / etc/gitlab&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;配置restore&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mv /etc/gitlab /etc/gitlab.&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date +%s&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
tar -xf etc-gitlab-1399948539.tar -C /
/usr/bin/gitlab-ctl reconfigure  &lt;span style=&#34;color:#75715e&#34;&gt;#重新加载配置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;数据备份还原&#34;&gt;数据备份还原&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;数据备份&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#如果使用Omnibus安装方式&lt;/span&gt;
/opt/gitlab/bin/gitlab-rake gitlab:backup:create
&lt;span style=&#34;color:#75715e&#34;&gt;#如果使用源码安装的话&lt;/span&gt;
sudo -u git -H bundle exec rake gitlab:backup:create RAILS_ENV&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;production
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;另外&lt;/strong&gt;如果使用AWS的服务需要将备份传S3那么可以直接再Gitlab的主配置文件进行配置，如何配置可以参照&lt;a href=&#34;https://docs.gitlab.com/ce/raketasks/backup_restore.html#using-amazon-s3&#34;&gt;【官方说明】&lt;/a&gt;,里面的&lt;code&gt;bucket&lt;/code&gt;参数只能写bucket的名字，不能有二级目录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据还原&lt;/strong&gt;
将备份的数据文件放的需要还原的Gitlab主机上的备份目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@VM_0_11_centos gitlab]# ls /var/opt/gitlab/backups/
1523625192_2018_04_13_10.6.4_gitlab_backup.tar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后停止连接数据库的进程&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gitlab-ctl stop unicorn
gitlab-ctl stop sidekiq
gitlab-ctl status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后执行还原命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# This command will overwrite the contents of your GitLab database!&lt;/span&gt;
gitlab-rake gitlab:backup:restore BACKUP&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1523625192_2018_04_13_10.6.4
&lt;span style=&#34;color:#75715e&#34;&gt;#还原使用备份文件名除去&amp;#34;_gitlab_backup.tar&amp;#34;这个部分&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果有必要还原&lt;code&gt;/etc/gitlab/gitlab-secrets.json&lt;/code&gt;最后重启Gitlab&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;gitlab-ctl restart
gitlab-rake gitlab:check SANITIZE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还原完成
另外如果还原需要降级，以下命令可能会需要&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Gitlab&lt;/code&gt;历史版本地址&lt;a href=&#34;https://packages.gitlab.com/gitlab/gitlab-ce&#34;&gt;【戳这里】&lt;/a&gt;
&lt;code&gt;yum downgrade &amp;quot;下载的旧版本的文件名&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;备份脚本&lt;/strong&gt;&lt;a href=&#34;https://github.com/Gourds/daily-scripts/blob/master/shell-scripts/backup_gitlab.sh&#34;&gt;【获取脚本】&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;RETVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ConfigBakDir:=/data/backup/gitlab&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; backup_config&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -d /etc/gitlab &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -d &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ConfigBakDir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; mkdir -p &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ConfigBakDir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
    sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cd &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ConfigBakDir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &amp;amp;&amp;amp; umask 0077 &amp;amp;&amp;amp; tar -cf &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;date &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;+etc-gitlab-%s_%Y_%m_%d.tar&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -C / etc/gitlab&amp;#34;&lt;/span&gt;
    RETVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$?
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; backup_data&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;which gitlab-rake&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    gitlab-rake gitlab:backup:create
    RETVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$?
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; restore_data&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;which gitlab-rake&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; -f &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;which gitlab-ctl&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; exit &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;gitlab-ctl status unicorn |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/://&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;run&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;gitlab-ctl status sidekiq |awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; |sed &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/://&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;run&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]]&lt;/span&gt;;&lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;Usage: gitlab-rake gitlab:backup:restore BACKUP=1523625192_2018_04_13_10.6.4&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        echo $msg
    &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
        echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Please make sure unicorn and sidekiq process have stop ! Now exit&amp;#39;&lt;/span&gt;
        exit &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; $1 in
    bak-etc&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    backup_config
    ;;
    bak-data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    backup_data
    ;;
    bak&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    backup_config
    backup_data
    ;;
    restore&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    restore_data
    ;;
    *&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    echo $&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Usage: &lt;/span&gt;$0&lt;span style=&#34;color:#e6db74&#34;&gt; {bak|bak-etc|bak-data|restore}&amp;#34;&lt;/span&gt;
    RETVAL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;esac&lt;/span&gt;
exit $RETVAL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;存储策略&lt;/strong&gt;
如果想定期删除一段时间前的备份文件，官方配置里已经有现成可配置的地方，在主配置文件&lt;code&gt;/etc/gitlab/gitlab.rb&lt;/code&gt;中通过设置以下参数后，然后重新加载配置即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# limit backup lifetime to 7 days - 604800 seconds&lt;/span&gt;
gitlab_rails&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;backup_keep_time&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;604800&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;计划任务&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#The CRON=1 environment setting tells the backup script to suppress all progress output if there are no errors.This is recommended to reduce cron spam.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker情况下的备份还原&#34;&gt;Docker情况下的备份还原&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# backup config&lt;/span&gt;
docker exec -t &amp;lt;your container name&amp;gt; /bin/sh -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;umask 0077; tar cfz /secret/gitlab/backups/$(date &amp;#34;+etc-gitlab-\%s.tgz&amp;#34;) -C / etc/gitlab&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# backup data&lt;/span&gt;
docker exec -t &amp;lt;your container name&amp;gt; gitlab-rake gitlab:backup:create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参考文档&#34;&gt;参考文档&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com.cn/ce/administration/index.html&#34;&gt;【Gitlab官网】&lt;/a&gt;
&lt;a href=&#34;https://docs.gitlab.com/omnibus/settings/backups.html&#34;&gt;【官方配置备份还原说明】&lt;/a&gt;
&lt;a href=&#34;https://docs.gitlab.com/ce/raketasks/backup_restore.html#creating-a-backup-of-the-gitlab-system&#34;&gt;【官方数据备份还原说明】&lt;/a&gt;
&lt;a href=&#34;https://gitlab.com/help/raketasks/backup_restore.md&#34;&gt;【备份还原说明】&lt;/a&gt;
&lt;a href=&#34;https://github.com/sund/auto-gitlab-backup&#34;&gt;【备份脚本说明】&lt;/a&gt;
&lt;a href=&#34;https://blog.mallux.me/2017/02/27/gitlab/&#34;&gt;【mallux的Blog】&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用Docker搭建Jira和Confluence系统</title>
      <link>http://blog.gourds.site/post/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAjira%E5%92%8Cconfluence%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 14 Apr 2018 15:47:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAjira%E5%92%8Cconfluence%E7%B3%BB%E7%BB%9F/</guid>
      
        <description>&lt;p&gt;**整理补个文档：**这周折腾了两天Jira和Confluence，准备用这个来代替现在使用的phabricator，Phabricator这个是开源的，Jira和Confluence时Atlassian公司的商业产品，具体如何选择看公司爱好吧。为简化测试和正式部署使用，采取Docker的方式进行安装部署。这里记录一下安装过程和一些避坑建议。另外多说一句Altlassian公司的产品还都蛮好用的，譬如Sourcetree。以下的脚本在&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/jira_confluence&#34;&gt;【Github】&lt;/a&gt;上都有&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;**&lt;a href=&#34;https://www.atlassian.com/software/jira&#34;&gt;JIRA&lt;/a&gt;&lt;strong&gt;是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。
&lt;/strong&gt;&lt;a href=&#34;https://www.atlassian.com/software/confluence&#34;&gt;Confluence&lt;/a&gt;&lt;strong&gt;是一个专业的企业知识管理与协同软件，也可以用于构建企业wiki。使用简单，但它强大的编辑和站点管理特征能够帮助团队成员之间共享信息、文档协作、集体讨论，信息推送。
&lt;/strong&gt;&lt;a href=&#34;https://github.com/phacility/phabricator&#34;&gt;Phabricator&lt;/a&gt;**是一套基于Web的软件开发协作工具，一个Web应用用于帮助软件公司构建更好的软件。原是facebook员工开发的可视化代码评审工具,主要功能有CodeReview、代码托管、Bug跟踪、Task管理、Wiki文档等功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;环境准备&#34;&gt;环境准备&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;本地实践环境:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;OS：&lt;code&gt;CentOS Linux release 7.2.1511 (Core)&lt;/code&gt;
Docker:&lt;code&gt;v1.13.1&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;启动Docker并将Docker添加至开机启动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Centos7上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install docker -y
systemctl enable docker.service
systemctl start docker.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在Centos6及Amazon Linux上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install docker -y
chkconfig --add docker
/etc/init.d/docker start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Iptables及SELinux设置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Centos7上&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#SELinux disabled&lt;/span&gt;
setenforce &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
sed -i &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;#39;&lt;/span&gt; /etc/sysconfig/selinux
getenforce
&lt;span style=&#34;color:#75715e&#34;&gt;#Iptables setup&lt;/span&gt;
yum install iptables-services
iptables -I  INPUT -p tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; -j ACCEPT
iptables -I  INPUT -p tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;18080&lt;/span&gt; -j ACCEPT
iptables -I  INPUT -p tcp --dport &lt;span style=&#34;color:#ae81ff&#34;&gt;8090&lt;/span&gt; -j ACCEPT
service iptables save
&lt;span style=&#34;color:#75715e&#34;&gt;#Other Command(Don&amp;#39;t config)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#systemctl stop firewalld.service&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#systemctl disable firewalld.service&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装myql&#34;&gt;安装Myql&lt;/h3&gt;
&lt;p&gt;使用官方镜像直接启动容器即可。不过使用Jira和Confluence时需要添加几个mysql启动配置,具体可参考&lt;a href=&#34;https://hub.docker.com/_/mysql/&#34;&gt;【Mysql镜像说明】&lt;/a&gt;，&lt;code&gt;packet&lt;/code&gt;及&lt;code&gt;log_file_size&lt;/code&gt;参数为应用要求防止大文件无法存储，&lt;code&gt;utf8&lt;/code&gt;是为了支持中文&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --name mysql -p 3306:3306 -v /data/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yourpasswd -idt mysql/mysql-server:latest --character-set-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --collation-server&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8_bin --max_allowed_packet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;512M --innodb_log_file_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2GB
&lt;span style=&#34;color:#75715e&#34;&gt;#docker run -it --rm docker.io/mysql/mysql-server --verbose --help&lt;/span&gt;
docker ps -a &lt;span style=&#34;color:#75715e&#34;&gt;#查看容器状态&lt;/span&gt;
docker exec -it mysql /bin/bash &lt;span style=&#34;color:#75715e&#34;&gt;#进入容器，PS由于mysql启动后root用户监听localhost所以创建Database时需要进入容器内部&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建Jira数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#mysql&amp;gt; show variables like &amp;#39;char%&amp;#39;;&lt;/span&gt;
mysql&amp;gt; CREATE DATABASE jira_db CHARACTER SET utf8 COLLATE utf8_bin;
mysql&amp;gt; grant ALL PRIVILEGES on jira_db.* to jira_user@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; Identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourpassword;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mysql&amp;gt; SHOW CREATE DATABASE jira_db;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;mysql&amp;gt; flush privileges;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建Confluence数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#mysql&amp;gt; show variables like &amp;#39;char%&amp;#39;;&lt;/span&gt;
mysql&amp;gt; create database confluence CHARACTER SET utf8 COLLATE utf8_bin;
mysql&amp;gt; grant ALL PRIVILEGES on confluence.* to confluence_user@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; Identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourpassword&amp;#34;&lt;/span&gt;;
mysql&amp;gt; SHOW CREATE DATABASE confluence;
mysql&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建数据库备份用户&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mysql&amp;gt; grant &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; on *.* to backup_user@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt; Identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;yourpassword&amp;#34;&lt;/span&gt;;
mysql&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;安装jira&#34;&gt;安装Jira&lt;/h3&gt;
&lt;p&gt;使用官方镜像直接启动Jira容器。这个服务没有太多问题，注意端口是否监听正确及相关端口（数据库端口、应用端口）是否放开，这里的端口放开是指本机防火墙，外网防火墙不应放行数据库端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -p 18080:8080 -dit --name jira docker.io/cptactionhank/atlassian-jira
&lt;span style=&#34;color:#75715e&#34;&gt;#Manage Application&lt;/span&gt;
docker ps
docker exec -it jira /bin/bash
docker stop jira
docker start jira
docker logs jira
docker logs -f jira
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在浏览器访问&lt;code&gt;http://host_address:18080&lt;/code&gt;跟着提示安装即可。&lt;/p&gt;
&lt;h3 id=&#34;安装confluence&#34;&gt;安装Confluence&lt;/h3&gt;
&lt;p&gt;由于Jira使用的是MySQL方便起见Confluence也要用Mysql，但是使用官方镜像会有以下问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.官方的对于PostSQL支持可以,但无法直接连接mysql需要自行安装支持java连接mysql的组件
b.中文Office在Confluence的预览查看会出现乱码情况，需要修改confluence连接参数及自行添加中文字体库
c.官方使用了不受支持的&lt;code&gt;openjdk&lt;/code&gt;，需要更改jdk环境为&lt;code&gt;Oracle JDK&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;鉴于这种情况使用这个官方镜像就很不理智了，还希望使用docker，只能自己做一个镜像了&lt;/p&gt;
&lt;h4 id=&#34;制作镜像&#34;&gt;制作镜像&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;准备工作&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; 下载&lt;code&gt;java-mysql&lt;/code&gt;
可以从Mysql官方&lt;a href=&#34;https://dev.mysql.com/downloads/file/?id=476197&#34;&gt;【下载地址】&lt;/a&gt;进行下载解压，只需要其中的两个文件，按下面的目录结构存放就可以了
&lt;strong&gt;Step 2:&lt;/strong&gt; 准备中文字体库
这个可以从身边现成的windows机器上直接压缩拷贝过来就行了，windows下的字体存放在&lt;code&gt;C:\Windows\Fonts&lt;/code&gt;,然后按下面的目录结构存放就可以了，注意这个压缩包需要和我下面目录的一直，不然需要自行更改&lt;code&gt;Dockerfile&lt;/code&gt;文件,还有这个压缩包应该是解压完后是&lt;code&gt;Fonts/字体&lt;/code&gt;这样的结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构建的目录结构&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;├── chinese-win.tar.gz
├── Dockerfile
├── entrypoint.sh
├── java-mysql
    ├── mysql-connector-java-5.1.46-bin.jar
    └── mysql-connector-java-5.1.46.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;构建文件及启动脚本
主构建文件&lt;code&gt;Dockerfile&lt;/code&gt;如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;FROM anapsix/alpine-java:8_jdk
LABEL &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Author&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arvon2014@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Date&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-04-11&amp;#34;&lt;/span&gt;
ENV RUN_USER  daemon
ENV RUN_GROUP daemon
ENV CONFLUENCE_HOME /var/atlassian/application-data/confluence
ENV CONFLUENCE_INSTALL_DIR   /opt/atlassian/confluence
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
VOLUME &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
EXPOSE &lt;span style=&#34;color:#ae81ff&#34;&gt;8090&lt;/span&gt;
EXPOSE &lt;span style=&#34;color:#ae81ff&#34;&gt;8091&lt;/span&gt;
WORKDIR $CONFLUENCE_HOME
RUN apk update -qq &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; update-ca-certificates &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add ca-certificates wget curl openssh bash procps openssl perl ttf-dejavu tini&lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/lib/&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;apt,dpkg,cache,log&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;/ /tmp/* /var/tmp/* &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p  &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
ARG CONFLUENCE_VERSION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;6.8.1
ARG DOWNLOAD_URL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;http://www.atlassian.com/software/confluence/downloads/binary/atlassian-confluence-&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_VERSION&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.tar.gz
RUN curl -L --silent                  &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;DOWNLOAD_URL&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; | tar -xz --strip-components&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -C &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
ADD chinese-win.tar.gz  /usr/share/fonts/
&lt;span style=&#34;color:#75715e&#34;&gt;#RUN fc-cache -fv&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#ADD atlassian-confluence-6.8.1.tar.gz $CONFLUENCE_INSTALL_DIR/&lt;/span&gt;
RUN chown -R &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_GROUP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/ &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/-Xms\([0-9]\+[kmg]\) -Xmx\([0-9]\+[kmg]\)/-Xms\${JVM_MINIMUM_MEMORY:=\1} -Xmx\${JVM_MAXIMUM_MEMORY:=\2} \${JVM_SUPPORT_RECOMMENDED_ARGS} -Dconfluence.home=\${CONFLUENCE_HOME}/g&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/bin/setenv.sh &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#    &amp;amp;&amp;amp; sed -i -e &amp;#39;/.*-Dconfluence.context.path=.*/a\CATALINA_OPTS=&amp;#34;-Dconfluence.document.conversion.fontpath=/usr/share/fonts/Fonts/ ${CATALINA_OPTS}&amp;#34;&amp;#39; ${CONFLUENCE_INSTALL_DIR}/bin/setenv.sh \&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sed -i -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;s/port=&amp;#34;8090&amp;#34;/port=&amp;#34;8090&amp;#34; secure=&amp;#34;${catalinaConnectorSecure}&amp;#34; scheme=&amp;#34;${catalinaConnectorScheme}&amp;#34; proxyName=&amp;#34;${catalinaConnectorProxyName}&amp;#34; proxyPort=&amp;#34;${catalinaConnectorProxyPort}&amp;#34;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/conf/server.xml
COPY entrypoint.sh              /entrypoint.sh
COPY java-mysql/mysql-connector-java-5.1.46.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.46.jar
COPY java-mysql/mysql-connector-java-5.1.46-bin.jar /opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.46-bin.jar
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
RUN chown -R &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_GROUP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
CMD &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/entrypoint.sh&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-fg&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
ENTRYPOINT &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/sbin/tini&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#CMD tail -f /entrypoint.sh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;启动脚本&lt;code&gt;entrypoint.sh&lt;/code&gt;如下&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;set -euo pipefail
&lt;span style=&#34;color:#75715e&#34;&gt;# Setup Catalina Opts&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_PROXYNAME:=&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_PROXYPORT:=&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_SCHEME:=http&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_SECURE:=false&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
: &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_OPTS:=&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;
CATALINA_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -DcatalinaConnectorProxyName=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_PROXYNAME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
CATALINA_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -DcatalinaConnectorProxyPort=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_PROXYPORT&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
CATALINA_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -DcatalinaConnectorScheme=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_SCHEME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
CATALINA_OPTS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_OPTS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; -DcatalinaConnectorSecure=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CATALINA_CONNECTOR_SECURE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
export CATALINA_OPTS
&lt;span style=&#34;color:#75715e&#34;&gt;# Start Confluence as the correct user&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;UID&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User is currently root. Will change directory ownership to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_GROUP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;, then downgrade permission to &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    PERMISSIONS_SIGNATURE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;stat -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%u:%U:%a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;
    EXPECTED_PERMISSIONS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;id -u &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt;:&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;:700
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;PERMISSIONS_SIGNATURE&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; !&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;EXPECTED_PERMISSIONS&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;; &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt;
        chmod -R &lt;span style=&#34;color:#ae81ff&#34;&gt;700&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            chown -R &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_GROUP&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;CONFLUENCE_HOME&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# Now drop privileges&lt;/span&gt;
    exec su -s /bin/bash &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;RUN_USER&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; -c &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/start-confluence.sh &lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
    exec &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$CONFLUENCE_INSTALL_DIR&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/start-confluence.sh&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;构建镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls &lt;span style=&#34;color:#75715e&#34;&gt;#进入dockerfile同级目录&lt;/span&gt;
docker build -t confluence-oracle-jdk:v6.8.1 . --no-cache &lt;span style=&#34;color:#75715e&#34;&gt;#构建镜像，这个需要一点时间，建议使用Tmux&lt;/span&gt;
docker images &lt;span style=&#34;color:#75715e&#34;&gt;#查看镜像&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;启动confluence&#34;&gt;启动Confluence&lt;/h4&gt;
&lt;p&gt;主要问题一般会出在构建阶段，如果启动失败可以尝试注释&lt;code&gt;Dockerfile&lt;/code&gt;的启动命令，然后进入容器手动调试&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -v /data/confluence:/var/atlassian/application-data/confluence --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;confluence&amp;#34;&lt;/span&gt; -d -p 8090:8090 -p 8091:8091 confluence-oracle-jdk:v6.8.1 &lt;span style=&#34;color:#75715e&#34;&gt;#调试期间可以加上 --rm参数&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#Manage Confluence&lt;/span&gt;
docker ps
docker exec -it confluence /bin/bash
docker stop confluence
docker start confluence
docker logs confluence
docker logs -f confluence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;容器启动后跟Jira一样检查端口和防火墙配置,确认没问题后，在浏览器访问&lt;code&gt;http://host_address:8090&lt;/code&gt;跟着提示安装，&lt;strong&gt;注意&lt;/strong&gt;在web界面连接数据库的时候需要选择&lt;code&gt;String&lt;/code&gt;模式，然后按照如下参数填写,如果没来得及修改，可以在&lt;code&gt;/data/confluence/confluence.cfg.xml&lt;/code&gt;这个配置里修改重启。另外如需链接Jira在最后根据提示选择就可以了，别的就没啥了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;jdbc:mysql://host_address:3306/confluence?sessionVariables&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tx_isolation&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;READ-COMMITTED&amp;#39;&lt;/span&gt;&amp;amp;useSSL&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;false&amp;amp;useUnicode&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true&amp;amp;characterEncoding&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8
&lt;span style=&#34;color:#75715e&#34;&gt;# Answer：https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数据备份&#34;&gt;数据备份&lt;/h3&gt;
&lt;p&gt;奉上一个拙劣的脚本，还能使就懒的改了,对了在非&lt;code&gt;Amazon Linux&lt;/code&gt;上，传S3记得装&lt;code&gt;pip install awscli --upgrade&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#* * 3 * * sh /data/arvon/scripts&lt;/span&gt;
ipaddr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10.0.1.7&amp;#39;&lt;/span&gt;
username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;backup_user&amp;#39;&lt;/span&gt;
password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;yourpasswd&amp;#39;&lt;/span&gt;
dest_dir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/data/mysql_data_bak&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;###&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; dump_db&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
all_area&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;show databases&amp;#34;&lt;/span&gt; | mysql -h&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ipaddr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -u&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -p&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; |egrep -v &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;information_schema|mysql|performance_schema|Database|sys&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
mkdir &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dest_dir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt; -p
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; area in $all_area;&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    mysqldump -h&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ipaddr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -u&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -p&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --default-character-set&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --comments&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FALSE --tables --no-create-info&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FALSE --add-drop-table&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;TRUE --no-data&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;FALSE &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;  &amp;gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dest_dir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.sql
    cd &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dest_dir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar czvf &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.sql.tar.gz &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.sql &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.sql
    echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[`date +%F_%R`] [INFO] Now the `date +%F`_&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;.sql have been backuped&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; /var/log/mysql_back.log
&lt;span style=&#34;color:#66d9ef&#34;&gt;done&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; load_db&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#usage:load_db 2017-05-23&lt;/span&gt;
time_want&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;$1
mysql -h&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ipaddr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -u&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -p&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --default-character-set&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --execute&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DROP DATABASE IF EXISTS  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
mysql -h&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ipaddr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -u&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -p&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --default-character-set&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --execute&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;CREATE DATABASE IF NOT EXISTS  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; DEFAULT CHARACTER SET utf8&amp;#34;&lt;/span&gt;;
mysql -h&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;ipaddr&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -u&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;username&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; -p&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;password&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; --default-character-set&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8 --database&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;dest_dir&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;time_want&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;_&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;area&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;.sql;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; upload_s3&lt;span style=&#34;color:#f92672&#34;&gt;(){&lt;/span&gt;
export AWS_ACCESS_KEY_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xxxx
export AWS_SECRET_ACCESS_KEY&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;xxxx
aws --region&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cn-northwest-1 s3 cp  /data/mysql_data_bak/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;  s3://itbackups/confluence-jira-mysql/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;date +%F&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;  --recursive
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

dump_db
upload_s3
&lt;span style=&#34;color:#75715e&#34;&gt;#load_db 2017-05-23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>Fluentd使用中遇到的丢数据问题</title>
      <link>http://blog.gourds.site/post/fluentd%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A2%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 11 Apr 2018 17:52:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/fluentd%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%A2%E6%95%B0%E6%8D%AE%E9%97%AE%E9%A2%98/</guid>
      
        <description>&lt;p&gt;目前遇到的问题主要有3个：两个关于buffer，一个关于connection。下面具体说描述下问题的详细信息及目前我采取的解决措施。先交代下我这里使用的Td-agent架构如下，PS（方便起见以下均将Td-agent简化为TD，关于TD和Fluentd的关系移步我的另一篇&lt;a href=&#34;http://arvon.top/2018/02/23/Td-agent%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/&#34;&gt;Blog&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;需要注意： 这里的缓存Buffer设置对0.14.21版本测试生效，亲测0.12.20不生效，具体可到&lt;a href=&#34;https://docs.fluentd.org/v1.0/articles/quickstart&#34;&gt;【Fluentd官网】&lt;/a&gt;获取支持。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph LR;
	  A(Td-client)--&amp;gt;F(Td-forward)
    B(Td-client)--&amp;gt;F(Td-forward)
    F--&amp;gt;E(Elasticsearch cluster)
    E--&amp;gt;K(Kibana)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Version：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;td-agent 0.14.21&lt;/code&gt;
&lt;code&gt;ES Version: 5.0.0, Build: 253032b/2016-10-26T04:37:51.531Z, JVM: 1.8.0_121&lt;/code&gt; And &lt;code&gt;lucene_version : &amp;quot;6.2.0&lt;/code&gt;
&lt;em&gt;Td-agent的es插件版本&lt;/em&gt;
&lt;code&gt;elasticsearch (1.0.18)&lt;/code&gt;
&lt;code&gt;elasticsearch-api (1.0.18)&lt;/code&gt;
&lt;code&gt;elasticsearch-transport (1.0.18)&lt;/code&gt;
&lt;code&gt;fluent-plugin-elasticsearch (1.8.0)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;q1td-client端的buffer问题&#34;&gt;Q1：Td-client端的Buffer问题&lt;/h3&gt;
&lt;p&gt;这个问题出现次数最多，而且log暴露的问题也是显而易见，主要解决是参数问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;  2018-03-16 03:25:19 +0000 [warn]: #0 suppressed same stacktrace
2018-03-16 03:25:19 +0000 [warn]: #0 failed to write data into buffer by buffer overflow action=:throw_exception
2018-03-16 03:25:19 +0000 [warn]: #0 emit transaction failed: error_class=Fluent::Plugin::Buffer::BufferOverflowError error=&amp;quot;buffer space has too many data&amp;quot; tag=&amp;quot;logics.5013.205&amp;quot;
  2018-03-16 03:25:19 +0000 [warn]: #0 suppressed same stacktrace
2018-03-16 03:25:19 +0000 [warn]: #0 failed to write data into buffer by buffer overflow action=:throw_exception
2018-03-16 03:25:19 +0000 [warn]: #0 emit transaction failed: error_class=Fluent::Plugin::Buffer::BufferOverflowError error=&amp;quot;buffer space has too many data&amp;quot; tag=&amp;quot;logics.5073.205&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;修改后的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;match&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;logics.**&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
   type forward
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt;
     @type file
     path /var/log/td-agent/buffer/td-gamex-buffer
     chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)
     total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)
     chunk_full_threshold 0.9 #flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold
     compress text #The option to specify compression of each chunks, during events are buffered
     flush_mode default
     flush_interval 15s #Default: 60s
     flush_thread_count 1 #Default: 1 The number threads used to write chunks in parallel
     delayed_commit_timeout 60 #The timeout seconds decides that async write operation fails
     overflow_action throw_exception
     retry_timeout 10m
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/buffer&amp;gt;&lt;/span&gt;
   send_timeout 60s
   recover_wait 10s
   heartbeat_interval 1s
   phi_threshold 16
   hard_timeout 60s
   heartbeat_type tcp
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;server&amp;gt;&lt;/span&gt;
      name logics.shard
      host tdagent.test.net
      port 24224
      weight 1
   &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/server&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;q2td-forward端的buffer问题&#34;&gt;Q2：Td-forward端的Buffer问题&lt;/h3&gt;
&lt;p&gt;正常来说对forward端配置buffer跟client端一样就行了，不过在实际使用中发现按client的配置会报错，如下，从报错来看是路径的问题，经查证是buffer的路径在&lt;code&gt;forest copy &lt;/code&gt;的配置类型下，需要区分index来进行缓存，使用&lt;code&gt;${tag}&lt;/code&gt;作为buffer存储路径的话就很好的解决了这个问题。类似issues可前往&lt;a href=&#34;https://github.com/uken/fluent-plugin-elasticsearch/issues/103&#34;&gt;【Github】&lt;/a&gt;查看&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;报错日志&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;2018-04-11 02:24:29 +0000 [error]: #0 Cannot output messages with tag &#39;logics.5022.205&#39;
2018-04-11 02:24:29 +0000 [error]: #0 failed to configure sub output copy: Other &#39;elasticsearch&#39; plugin already use same buffer path: type = elasticsearch, buffer path = /var/log/td-agent/buffer/td-gamex-buffer
2018-04-11 02:24:29 +0000 [error]: #0 /opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/buf_file.rb:71:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/output.rb:305:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/inject.rb:104:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/event_emitter.rb:73:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/compat/output.rb:504:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-elasticsearch-1.9.2/lib/fluent/plugin/out_elasticsearch.rb:71:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin.rb:164:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:73:in `block in configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:62:in `each&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/multi_output.rb:62:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin.rb:164:in `configure&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:132:in `block in plant&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:128:in `synchronize&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:128:in `plant&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluent-plugin-forest-0.3.3/lib/fluent/plugin/out_forest.rb:169:in `emit&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/compat/output.rb:211:in `process&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/bare_output.rb:53:in `emit_sync&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/event_router.rb:96:in `emit_stream&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:300:in `on_message&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:211:in `block in handle_connection&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:248:in `call&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:248:in `block (3 levels) in read_messages&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:247:in `feed_each&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:247:in `block (2 levels) in read_messages&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:256:in `call&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin/in_forward.rb:256:in `block in read_messages&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/server.rb:576:in `call&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/server.rb:576:in `on_read_without_connection&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/io.rb:123:in `on_readable&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/io.rb:186:in `on_readable&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/loop.rb:88:in `run_once&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/cool.io-1.4.6/lib/cool.io/loop.rb:88:in `run&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/event_loop.rb:84:in `block in start&#39;
/opt/td-agent/embedded/lib/ruby/gems/2.1.0/gems/fluentd-0.14.13/lib/fluent/plugin_helper/thread.rb:78:in `block in thread_create&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;解决后的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;match&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;logics.**&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  type forest
  subtype copy
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;store&amp;gt;&lt;/span&gt;
      @type elasticsearch
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt;
        @type file
        path /var/log/td-agent/buffer/td-gamex-buffer/${tag}
        chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)
        total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)
        chunk_full_threshold 0.9 #flush the chunk when actual size reaches chunk_limit_size * chunk_full_threshold
        compress text #The option to specify compression of each chunks, during events are buffered
        flush_mode default
        flush_interval 15s #Default: 60s
        flush_thread_count 1 #Default: 1 The number threads  used to write chunks in parallel
        delayed_commit_timeout 60 #The timeout seconds decides that async write operation fails
        overflow_action throw_exception
        retry_timeout 10m
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/buffer&amp;gt;&lt;/span&gt;
      host elasticsearch.test.net
      port 9200
      logstash_format true
      logstash_prefix bilogs
      logstash_dateformat logics-${tag_parts[-1]}.%Y.%m.%d
      time_key time
      request_timeout 60s
      reload_connections false
      reload_on_failure true
      reconnect_on_error true
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/store&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;q3td-forward端的connection问题&#34;&gt;Q3：Td-forward端的connection问题&lt;/h3&gt;
&lt;p&gt;这个问题主要发生在TD向ES发送数据阶段，起初考虑是ES集群处理能力达到上限，无法分配更对的连接给TD，但是进行Reload之后就正常了，所以这个问题的可能性不大，很可能是TD或者ES在处理连接的逻辑上存在问题，没有正确的关闭或者使用连接。经过查找资料，也找到了一些蛛丝马迹，可供参考的资料也一快带上&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考资料&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A. &lt;a href=&#34;https://github.com/atomita/fluent-plugin-aws-elasticsearch-service/issues/15&#34;&gt;【Github 关于这个问题的Issues】&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;报错信息&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;2018-03-21 04:28:19 +0000 [warn]: temporarily failed to flush the buffer. next_retry=2018-03-21 04:28:34 +0000 error_class=&amp;quot;Elasticsearch::Transport::Transport::Error&amp;quot; error=&amp;quot;Cannot get new connection from pool.&amp;quot; plugin_id=&amp;quot;object:3fe6fced399c&amp;quot;
  2018-03-21 04:28:19 +0000 [warn]: suppressed same stacktrace
2018-03-21 04:28:35 +0000 [warn]: temporarily failed to flush the buffer. next_retry=2018-03-21 04:29:08 +0000 error_class=&amp;quot;Elasticsearch::Transport::Transport::Error&amp;quot; error=&amp;quot;Cannot get new connection from pool.&amp;quot; plugin_id=&amp;quot;object:3fe6fced399c&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;再说明
**解决方法：**还是升级吧，升级至1.9.1版本之后该问题消失。&lt;a href=&#34;https://github.com/uken/fluent-plugin-elasticsearch/pull/220&#34;&gt;【关于修复PR信息点这里】&lt;/a&gt;在&lt;a href=&#34;https://github.com/uken/fluent-plugin-elasticsearch/pull/220/commits/494a68d6b26575e212713b156ab6fe61a7b38733&#34;&gt;【版本1.9.1 该Release版本时间为2016.12.14】&lt;/a&gt;中修复&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;目前解决主要涉及以下几个方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;reload_connections false # defaults to true&lt;/code&gt;
You can tune how the elasticsearch-transport host reloading feature works. By default it will reload the host list from the server every 10,000th request to spread the load. This can be an issue if your Elasticsearch cluster is behind a Reverse Proxy, as Fluentd process may not have direct network access to the Elasticsearch nodes.
对于这个参数，我这里ES集群并没有使用代理而是DSN域名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reload_on_failure true # defaults to false&lt;/code&gt;
Indicates that the elasticsearch-transport will try to reload the nodes addresses if there is a failure while making the&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request, this can be useful to quickly remove a dead node from the list of addresses&lt;/code&gt;
这个主要是当请求发生故障时ES-transport将重新加载节点地址，删除死节点，我这里使用的也是true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reconnect_on_error true&lt;/code&gt;
Github提到这个有帮助，实测并不好用，问题还是会出现，但频率貌似有减少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;目前解决途径&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;match&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;logics.**&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
  type forest
  subtype copy
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;store&amp;gt;&lt;/span&gt;
      type elasticsearch
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;buffer&amp;gt;&lt;/span&gt;
        @type file
        path /var/log/td-agent/buffer/td-gamex-buffer/${tag}
        chunk_limit_size 512MB #Default: 8MB (memory) / 256MB (file)
        total_limit_size 32GB #Default: 512MB (memory) / 64GB (file)
        chunk_full_threshold 0.9 #flush chunk when size reaches chunk_limit_size * chunk_full_threshold
        compress text #The option to specify compression of each chunks, during events are buffered
        flush_mode default
        flush_interval 15s #Default: 60s
        flush_thread_count 1 #Default: 1 The number threads used to write chunks in parallel
        delayed_commit_timeout 60 #The timeout seconds  async write operation fails
        overflow_action throw_exception
        retry_timeout 10m
      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/buffer&amp;gt;&lt;/span&gt;
      host elasticsearch.yingxiong.net
      port 9200
      logstash_format true
      logstash_prefix bilogs
      logstash_dateformat logics-${tag_parts[-1]}.%Y.%W
      time_key time
      flush_interval 10s
      request_timeout 15s
      num_threads 2
      reload_connections false
      reload_on_failure true
      reconnect_on_error true
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/store&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/match&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      
    </item>
    
    <item>
      <title>即学即用Docker读书笔记</title>
      <link>http://blog.gourds.site/post/%E5%8D%B3%E5%AD%A6%E5%8D%B3%E7%94%A8docker%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 09 Apr 2018 19:35:00 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E5%8D%B3%E5%AD%A6%E5%8D%B3%E7%94%A8docker%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
      
        <description>&lt;p&gt;&lt;a href=&#34;https://book.douban.com/subject/26700648/&#34;&gt;《即学即用Docker》&lt;/a&gt;这本书在手里也有很长时间了，现在补上读书笔记。感觉这书非常适合入门，对没有docker基础的推荐阅读。目前手里还有《Docker经典实例》和《Kubernetes权威指南》等待我的临幸，有时间就争取先来一遍。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容器是什么&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器不同于VMware或者Xen这种虚拟化系统，是一种完全不同的虚拟化方式，所有容器共用一个内核，而且容器之间的隔离完全在这个内核中实现，这叫做操作系统虚拟化。&lt;/li&gt;
&lt;li&gt;容器是自成一体的执行环境，所有容器共用宿主机的内核，而且系统中的容器之间是相互隔离的（不强制一定要隔离）。&lt;/li&gt;
&lt;li&gt;容器的最大优势是高效使用资源，因为不用为了使用各个独立的功能而运行整个操作系统。因为容器共用一个内核，所以隔离执行的任务和底层硬件之间少了一层交互。运行在容器里面的进程只需要使用很少一部分内核，进程在特权模式下进出处理器时不会再调出一个完整的内核。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;命令相关&#34;&gt;命令相关&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker version
&lt;span style=&#34;color:#75715e&#34;&gt;#查看docker版本信息&lt;/span&gt;
docker info
&lt;span style=&#34;color:#75715e&#34;&gt;#查看服务器信息&lt;/span&gt;
docker run &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; docker create + docker start
&lt;span style=&#34;color:#75715e&#34;&gt;#docker run 是两条命令的聚合&lt;/span&gt;
docker create --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test-service&amp;#34;&lt;/span&gt; ubuntu:latest
&lt;span style=&#34;color:#75715e&#34;&gt;#指定容器名称&lt;/span&gt;
docker run -d --name labels -l author&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arvon -l tester&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;Mo  ubuntu:latest sleep &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;
docker ps -a -f label&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;deployer&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;arvon
docker inspect 509531d14f70
&lt;span style=&#34;color:#75715e&#34;&gt;#指定容器标签、通过ps可以组合标签过滤、通过inspect可以查看所有标注&lt;/span&gt;
docker run --rm -it ubuntu:latest /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#启动一个没有任何特殊配置的容器，rm参数表示退出容器时会删除容器,i参数表示交互，t参数表示启动一个伪tty&lt;/span&gt;
docker run -it --hostname&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;test.example.com&amp;#34;&lt;/span&gt; ubuntu:latest /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#启动一个主机名为test.example.com的容器&lt;/span&gt;
docker run --it --dns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8.8.8.8 --dns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8.8.4.4 --dns-search&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example.com --dns-search&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;example2.com ubuntu:latest /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#启动一个指定dns的容器，默认会使用宿主机resolv.conf&lt;/span&gt;
docker run --it --mac-address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;xx.xx.xx.xx.xx.xx&amp;#34;&lt;/span&gt; ubuntu:latest /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#指定MAC地址，默认会自己计算，尽量别使用这个玩意&lt;/span&gt;
docker run --it -v /mnt/data1:/data ubuntu:latest /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#挂载本地data1到容器/data，不需要容器内预先存在挂载点，会自己创建&lt;/span&gt;
docker stop -t &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt; mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#强制停止myql容器，适用于无法正常停止的情况，发送SIGTERM信号，如果25s后容易还没有停止，就发送SIGKILL信号，强制清除容器&lt;/span&gt;
docker kill mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#清除容器，跟Linux的Kill命令一样&lt;/span&gt;
docker kill --signal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;USR1 mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#发送UNIX信号对容器进行管理&lt;/span&gt;
docker ps
&lt;span style=&#34;color:#75715e&#34;&gt;#查看运行中的容器&lt;/span&gt;
docker ps -a
&lt;span style=&#34;color:#75715e&#34;&gt;#查看所有容器&lt;/span&gt;
docker rm mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#删除容器&lt;/span&gt;
docker images
&lt;span style=&#34;color:#75715e&#34;&gt;#列出镜像&lt;/span&gt;
docker rmi mysql:0.1
&lt;span style=&#34;color:#75715e&#34;&gt;#删除镜像&lt;/span&gt;
docker inspect container_id
&lt;span style=&#34;color:#75715e&#34;&gt;#查看容器详细信息&lt;/span&gt;
docker exec -it mysql /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#进入运行中的容器mysql&lt;/span&gt;
docker stats
&lt;span style=&#34;color:#75715e&#34;&gt;#查看docker容器的运行状态，类似top&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关于资源配额&#34;&gt;关于资源配额&lt;/h3&gt;
&lt;p&gt;Docker使用Linux内核中cgroup功能控制Docker容器的可用资源，执行docker create时可以直接配置分配给容器的CPU和内存量。
使用&lt;code&gt;docker info&lt;/code&gt;可以查看当前docker是否有支持，如不支持需要在内核启动时指定相应的参数，一般来说都是支持的。
&lt;strong&gt;CPU配额&lt;/strong&gt;：cpu配额类似nice，可以看做是对任务优先级的调整&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#创建一个容器包含2个cpu密集型1个io密集型和两个占用内存的进程，压测&lt;/span&gt;
docker run -it  -c &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;  progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#理论上cpu的load会是上一条命令的一般，使用-c参数指定cpu配额，类似nice，默认配额为1024&lt;/span&gt;
docker run -it  -c &lt;span style=&#34;color:#ae81ff&#34;&gt;512&lt;/span&gt;  --cpuset&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#创建一个容器--cpuset参数指定在特定cpu上运行，没有这个cpu的话容器启动会报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;内存配额&lt;/strong&gt;：内存限额是硬性限制，设定限额后容器内存不足会像普通进程一样使用swap&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -it -m 512m progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#创建一个内存限额512M交换分区限额512的容器,使用-m参数&lt;/span&gt;
docker run -it -m 512m --memory-swap&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1024m progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#创建一个内存限额512M交换分区限额1024M的容器，使用--memory-swap单独制定swap，设置为-1则禁用交换空间&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;权限限制：&lt;/strong&gt; 类似Linux中的ulimit&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run -d --default-ulimit nofile&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;50:150 --default-ulimit nproc&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10:20
&lt;span style=&#34;color:#75715e&#34;&gt;#告诉docker守护进程每个容器可以打开150个文件，运行20个进程，为硬性限制&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;容器自动重启&#34;&gt;容器自动重启&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;自动重启&lt;/strong&gt;：共有三个参数可选&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;no&lt;/code&gt;: 容器退出不重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;always&lt;/code&gt;: 不管容器退出码是什么都重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on-failure:3&lt;/code&gt;: 在容器退出码不是零的情况下尝试重启3次，3次依然失败的话就放弃重启&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --restart&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;on-failure:3 progrium/stress --cpu &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --io &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; --vm &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; --vm-bytes 128M --timeout 120s
&lt;span style=&#34;color:#75715e&#34;&gt;#启动一个容器容器退出后尝试重启3次&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;暂停容器&#34;&gt;暂停容器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;暂停容器：&lt;/strong&gt; 暂停功能是通过cgroup的冻结程序实现的，暂停容器时容器的内存等状态还在，只是无法提供服务，类似于快照的状态&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker pause mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#暂停容器&lt;/span&gt;
dcoker unpause mysql
&lt;span style=&#34;color:#75715e&#34;&gt;#恢复容器，运行时间从恢复的这一时刻计算&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;镜像存储&#34;&gt;镜像存储&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;公共注册&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker Hub&lt;/li&gt;
&lt;li&gt;Quay.io&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;私有注册&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker-registry #支持了S3和Azure&lt;/li&gt;
&lt;li&gt;CoreOS Enterprose Registry&lt;/li&gt;
&lt;li&gt;Docker Hub Enterprise&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器命名空间&#34;&gt;容器命名空间&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;nsenter工具&lt;/strong&gt;：Linux内核中的util-linux包里有个nsenter工具，用于进入linux的命令空间，因此可以通过这个工具进入运行在宿主机上的容器（不管这个容器是否有响应）
**注意：**nsenter命令只能在宿主机上使用，并且需要把容器里顶层进程的PID传递给nsenter，看起来很麻烦的说，不过jpetazzo/nsenter容器有一个方便的脚本docker—enter会让这个过程简单不少&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter
&lt;span style=&#34;color:#75715e&#34;&gt;#安装nsenter工具到/usr/local/bin目录&lt;/span&gt;
docker inspect d2c3ce380095 --format &lt;span style=&#34;color:#f92672&#34;&gt;{{&lt;/span&gt;.State.Pid&lt;span style=&#34;color:#f92672&#34;&gt;}}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#查看容器的pid&lt;/span&gt;
nsenter --target &lt;span style=&#34;color:#ae81ff&#34;&gt;30302&lt;/span&gt; --mount --uts --ipc --net --pid
&lt;span style=&#34;color:#75715e&#34;&gt;#进入pid为30302的命名空间&lt;/span&gt;
docker-enter 12b57becb46b /bin/bash
&lt;span style=&#34;color:#75715e&#34;&gt;#使用docker-enter命令相当于上面两条命令的合并，简单多了，主要用这个&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;docker日志&#34;&gt;Docker日志&lt;/h3&gt;
&lt;p&gt;在Linux对log处理通常有两种方式，一种是将日志写入本地文件，一种是写入内核缓冲区然后使用dmesg命令读取。而docker提供的方式是使用&lt;code&gt;docker logs&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker logs d2c3ce380095
&lt;span style=&#34;color:#75715e&#34;&gt;#查看容器的全部log&lt;/span&gt;
docker logs -f d2c3ce380095
&lt;span style=&#34;color:#75715e&#34;&gt;#阻塞方式查看log，与Linux中tail -f基本相同&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Docker中容器的默认log存储在&lt;code&gt;/var/lib/docker/containers/&amp;lt;your-contain-id&amp;gt;/&lt;/code&gt;这个目录下，记录的格式如下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{&amp;quot;log&amp;quot;:&amp;quot;[7] 04-08 13:10:00,633 INFO total_commands_processed:3906596\r\n&amp;quot;,&amp;quot;stream&amp;quot;:&amp;quot;stdout&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2018-04-08T13:10:00.848081205Z&amp;quot;}
#log:实际log，stream：log的输出，time：docker守护进程收到log的时间
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Tips：&lt;/strong&gt; 目前大规模部署docker时处理日志的最佳方式是把容器的log直接发送给系统日志syslog，使用这种方式构建容器时需要指定&lt;code&gt;--log-driver=syslog&lt;/code&gt;选项&lt;/p&gt;
&lt;p&gt;目前解决log问题的思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让应用直接把日志发给系统日志&lt;/li&gt;
&lt;li&gt;在容器里使用进程管理器转发日志（如systemd、upstart、supervisor等）&lt;/li&gt;
&lt;li&gt;在容器中运行一个日志中继器，包装容器的stdout和stderr&lt;/li&gt;
&lt;li&gt;在服务器中把docker的JSON日志转发给系统日志&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得实践的方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supervisor插件 ==&amp;gt; &lt;a href=&#34;https://github.com/newrelic/supervisor-remote-logging&#34;&gt;github地址【python编写】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;spotify发布的中继器 ==&amp;gt; &lt;a href=&#34;https://github.com/spotify/syslog-redirector&#34;&gt;github地址【go编写】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用logspout集中处理日志 ==&amp;gt; &lt;a href=&#34;https://github.com/gliderlabs/logspout&#34;&gt;github地址【go编写】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;监控docker&#34;&gt;监控docker&lt;/h3&gt;
&lt;p&gt;Docker提供简单的命令来查看一些比较基础的信息，&lt;code&gt;docker stats&lt;/code&gt;以及&lt;code&gt;docker events&lt;/code&gt;,推荐使用docker的API来对容器进行信息采集和监控，而且结合一些可视化的图表工具会更直观一点。
&lt;strong&gt;可视化工具推荐&lt;/strong&gt;：商业化的就不推荐了只弄开源的东西&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cAdvisor 【google开发的】&lt;a href=&#34;https://github.com/google/cadvisor&#34;&gt;项目地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nagios&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;使用cAdvisor&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;docker run &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/:/rootfs:ro &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/run:/var/run:rw &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/sys:/sys:ro &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/lib/docker/:/var/lib/docker:ro &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --volume&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/dev/disk/:/dev/disk:ro &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --publish&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;8080:8080 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --detach&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  --name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cadvisor &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;  google/cadvisor:v0.24.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问&lt;code&gt;http://localhost:8080&lt;/code&gt;即可查看web页面，很不错。另外还提供了REST API，可以通过这个api在自己的监控系统中轻松的查询众多详细信息,另外我这里使用0.24.1的原因是使用latest版本报错了，现在暂时不想折腾这个，这个0.24.1版本可用。&lt;/p&gt;
&lt;h3 id=&#34;部署工具介绍&#34;&gt;部署工具介绍&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;关于部署&lt;/strong&gt;：部署应该满足两个条件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以重复执行，每次部署都做相同的事情&lt;/li&gt;
&lt;li&gt;定义应用的配置，保证每次部署都使用相同的配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;工具的类别&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于编排和部署，（替代Capistrano、Fabric、shell等）
这种工具基本上是在多个Docker守护进程之间采用异步方式协调应用的配置和部署过程，代表有：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;New Relic开发的Centurion&lt;a href=&#34;https://github.com/newrelic/centurion&#34;&gt;【Github项目地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Spotify开发的Helios&lt;a href=&#34;https://github.com/spotify/helios&#34;&gt;【Github项目地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ansible为Docker提供的工具&lt;a href=&#34;https://www.ansible.com/integrations/containers/docker&#34;&gt;【官网地址】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用于自动调度和集群管理，代替手工操作
使用分布式调度程序管理Docker，将整个网络看作是一个大电脑，通过定义一些策略，指明如何运行应用，不需要人为具体操作底层细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;最早出现在公众视野的是CroeOS退出的Fleet&lt;a href=&#34;https://github.com/coreos/fleet&#34;&gt;【Github项目地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;目前最火的是Google推出的Kubernetes&lt;a href=&#34;https://kubernetes.io/&#34;&gt;【官网地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最成熟的是由加州伯克利分校研究人员编写的Mesos&lt;a href=&#34;http://mesos.apache.org/&#34;&gt;【官网地址】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker公司原生的Swarm&lt;a href=&#34;https://github.com/docker/swarm&#34;&gt;【Github项目地址】&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;命名空间&#34;&gt;命名空间&lt;/h3&gt;
&lt;p&gt;虽然容器和系统中其他进程公用一个内核，但看起来每个容器都有自己的文件系统、网络接口、硬盘和其他资源，其实这是一种抽象的处理，在内核中实现这种抽象的方法是使用命名空间，在命名空间中容器认为自己独占所有资源。命名空间实现的是视觉隔离，而且很多情况下实现的是功能的隔离，目的是让容器看起来像是运行在同一个内核之上的虚拟机。目前Linux内核实现的6种命名空间容器都有，如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;挂载命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker主要使用这个命名空间让容器看起来有自己完整的文件系统，挂载命名空间与chroot实现类似，不过隔离性更好，而且深入到内核中，以至于&lt;code&gt;mount&lt;/code&gt;和&lt;code&gt;unmount&lt;/code&gt;系统调用都在命名空间中操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UTS命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;UTS命名空间作用在内核上，利用UNIX分时系统给各个容器指定主机名和域名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;IPC命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这种命名空间把容器的System V进程间通信。消息队列和POSIX消息队列与主机的消息队列隔离开。IPC命名空间负责的进程间通信不是由文件系统资源实现的，而是由共享内存和信号量实现的，而且相互通信的进程在同一容器里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;PID命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;每个命名空间里的进程都有相对该命名空间而言唯一的PID，如在容器中看的ps和宿主机上看到的ps输出就是完全不同的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;网络命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这种命名空间为容器提供专用的网络设备和端口等。&lt;code&gt;docker ps&lt;/code&gt;命令输出会显示容器绑定的端口，这些端口分别在两个命名空间中。如容器里nginx一般会绑定80端口，其实这个端口在容器所属网络命名空间的网络接口上。这种命名空间让容器看起来像是拥有完全独立的网络栈。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;用户命名空间&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;用户命名空间把容器里的用户和用户组与Docker宿主机的用户和用户组隔离开。在容器里和宿主机上看到用户ID不同的原因就是因为有这个用户命名空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;补充说明之前的一个例子：&lt;/strong&gt; 命名空间就是之前可以进入一个已经退出的容器的原因，以下命令就是进入这个容器的所有命名空间&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nsenter --target $PID --mount --uts --ipc --net --pid
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关于容器安全性&#34;&gt;关于容器安全性&lt;/h3&gt;
&lt;p&gt;容器只是运行在Docker宿主机中的一个进程。容器实现的隔离性没有虚拟机实现的强。容器的性能之所以高其中的一个原因就是与宿主机公用一个内核，但是内核中的一切并不都会放在命名空间中，这就是人们认为Docker容器存在的安全隐患之一也是最严重的一个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在容器中以非Root用户运行应用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;容器里的root用户其实是系统的root用户，不过容器里的root用户有些额外的限制，禁止了&lt;code&gt;/proc&lt;/code&gt;和&lt;code&gt;/sys&lt;/code&gt;文件系统中最危险的部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;--privileged=true&lt;/code&gt;选项赋予容器更大的权限（尽量不要用这个更不安全）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候容器需要一些更多的权限去做一些事情，如挂载存储、修改网络配置、新建UNIX设备等。不过建议不是必须不要这么做，可以通过&lt;code&gt;--cap-add=NET_ADMIN&lt;/code&gt;和&lt;code&gt;--cap-drop&lt;/code&gt;结合起来赋予尽可能准确且尽可能少的权限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;SELinux、AppArmor&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SELinux最初由美国国家安全局开发，目的是精确控制安全。AppArmor的目标与SELinux类似，不过比SELinux简单。Docker会根据所用平台对两者支持其一。这个根据实际需求再研究吧，也算是比较重的一块了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Docker守护进程安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;保证Docker安全性的基本做法与很多其他网络守护进程一样：加密通信、认证用户。另外最好不要让docker能直接访问互联网。如果需要在网络外部访问Docker宿主机，应该考虑使用VPN或SSH隧道做跳转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;容器化平台的12要素&#34;&gt;容器化平台的12要素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;代码基&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;只把一份代码基纳入版本控制&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;依赖&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;明确声明所需的依赖，并把依赖与周围的环境隔离开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;配置&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在环境变量中存储配置，不在代码基的文件中存储。在创建Dockerfile的时候需要的配置使用环境变量的方式进行传递，在执行容器创建的时候再通过&lt;code&gt;-e&lt;/code&gt;参数传入。如让容器使用类似这种配置&lt;code&gt;process.env.ENVIRONMNET&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;后端服务&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;把后端服务当做是附加资源。要在应用中实现优雅的降级方案，而且不能假定资源（如文件系统存储空间）始终可用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;构建、发布、运行&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;要严格区分构建和运行步骤，遵守这个流程，每一步自成一体，相互独立有利于缩短反馈循环，尽快解决部署过程中出现的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;进程&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以一个或多个无状态的进程运行应用。任何共享数据都要从有状态的后端存储中获取，这么做便于重复部署应用实例，而且不会丢失重要的会话数据。应用不能长时间保存状态，保存状态的时间最好比单次请求并返回响应的时间短，而且越短越好。如果必须保存状态，最好使用远程数据存储，如Redis、PostgreSQL、Memcache，甚至是Amazon的S3服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;端口绑定&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过绑定的端口提供服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;并发&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过进程模型实现横向扩展&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;易用&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;加快启动速度，使用优雅的方式关闭，尽量提升健壮性，Docker关闭或者清除容器会向容器发送标准的UNIX信号，因此容器化的应用可以检测这些信号，然后采取合适的方式优雅的关闭服务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开发环境和生产环境同等重要&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;尽量保持开发环境，过度环境和生产环境一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;日志&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;把日志当作事件流，服务本身不应该关心如何转发或者存储日志。事件不能缓冲，要通过流的形式写入标准输出，交给宿主进程处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;管理进程&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用一次性进程执行管理任务。主要观点是绝不要使用随意编写出来的计划任务脚本执行管理和维护任务，而要把这些脚本和相关的功能保存在应用的代码基里。不需要在应用的每个实例中运行，需要执行维护作业时，可以启动一个专门的容器，只执行指定的作业，执行完成后就结束生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;响应式宣言&#34;&gt;响应式宣言&lt;/h3&gt;
&lt;p&gt;2013年7月，Typesafe公司CTO jonas和几个贡献者完善了这个宣言，根据这个宣言定义，&lt;code&gt;响应式系统&lt;/code&gt;应具备四个特点：反应迅速、恢复力强、灵活性高、消息驱动&lt;/p&gt;</description>
      
    </item>
    
    <item>
      <title>使用IPsec搭建vpn系统</title>
      <link>http://blog.gourds.site/post/%E4%BD%BF%E7%94%A8ipsec%E6%90%AD%E5%BB%BAvpn%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 31 Mar 2018 20:53:45 +0000</pubDate>
      
      <guid>http://blog.gourds.site/post/%E4%BD%BF%E7%94%A8ipsec%E6%90%AD%E5%BB%BAvpn%E7%B3%BB%E7%BB%9F/</guid>
      
        <description>&lt;p&gt;多机房情况下，有时候需要将跨机房内网打通，现在还是使用ipsec的多。而且相对也比较成熟。IPsec全称ip Security，由两类协议组成，分别为AH协议（Authentication Header）和ESP协议（Encapsulated Security Payload），由于AH协议无法提供数据加密，所有数据在传输时以明文传输，且AH由于提供数据来源确认，所以无法穿越NAT，所以这两种协议中ESP协议应用更广泛一些。VPN只是IPSec的一种应用方式。刚好有空余的机器就简单实验一下。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th&gt;数据来源确认&lt;/th&gt;
&lt;th&gt;数据加密&lt;/th&gt;
&lt;th&gt;数据完整性确认&lt;/th&gt;
&lt;th&gt;其他&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;AH常用摘要算法（单向Hash函数）MD5和SHA1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;td&gt;ESP通常使用DES、3DES、AES等加密算法实现数据加密，使用MD5或SHA1来实现数据完整性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;搭建&#34;&gt;搭建&lt;/h3&gt;
&lt;h4 id=&#34;实验环境&#34;&gt;实验环境&lt;/h4&gt;
&lt;p&gt;|Region|Public IP|Private IP|Gateway|
|&amp;mdash;|&amp;mdash;|&amp;mdash;|
|CD-Host-A|118.24.48.193|172.27.0.12|172.27.0.1|
|CD-Host-B|118.24.49.251|172.27.0.4|172.27.0.1|
|GZ-Host-A|193.112.154.165|172.16.0.10|172.16.0.1|
|GZ-Host-B|193.112.143.226|172.16.0.16|172.16.0.1|&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;版本信息：&lt;/strong&gt;
规划：其中CD-A和GZ-A这两台机器作为vpn服务器。
版本：&lt;code&gt;Linux Libreswan 3.20 (netkey) on 3.10.0-514.26.2.el7.x86_64&lt;/code&gt;
OS:&lt;code&gt;CentOS Linux release 7.2.1511 (Core)&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;安装初始化主机cd-a&#34;&gt;安装初始化（主机CD-A）&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;yum install -y openswan
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;系统参数调整&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat /etc/sysctl.conf &lt;span style=&#34;color:#75715e&#34;&gt;#修改参数如下&lt;/span&gt;
net.ipv4.ip_forward &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
net.ipv4.conf.default.rp_filter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
sysctl -p &lt;span style=&#34;color:#75715e&#34;&gt;#执行命令让参数生效&lt;/span&gt;
setenforce &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#关闭selinux&lt;/span&gt;
iptables -nvL &lt;span style=&#34;color:#75715e&#34;&gt;#确认端口开放UDP 500 4500&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#关闭ipmp重定向（是否需要）&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#sysctl -a | egrep &amp;#34;ipv4.*(accept|send)_redirects&amp;#34; | awk -F &amp;#34;=&amp;#34; &amp;#39;{print$1&amp;#34;= 0&amp;#34;}&amp;#39; &amp;gt;&amp;gt; /etc/sysctl.conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;主配置如下&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#cat /etc/ipsec.conf&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#version 2&lt;/span&gt;
config setup
	protostack&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;netkey
	dumpdir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/run/pluto/
	nat_traversal&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes
	virtual_private&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:25.0.0.0/8,%v4:100.64.0.0/10,%v6:fd00::/8,%v6:fe80::/10
include /etc/ipsec.d/*.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;配置key认证&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;echo 0.0.0.0   0.0.0.0 : PSK &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;arvon.top&amp;#34;&lt;/span&gt; &amp;gt; /etc/ipsec.d/cn.secrets#引号内为key字段
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**关于配置:**可以通过命令&lt;code&gt;man ipsec.conf&lt;/code&gt;获得帮助
&lt;strong&gt;填写连接的配置&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#cat /etc/ipsec.d/cn.conf&lt;/span&gt;
conn cn-test
	ike&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3des-sha1
	authby&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;secret
	phase2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;esp
	phase2alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3des-sha1
	compress&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no
	pfs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes
	type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tunnel
	left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.27.0.12
	leftid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;118.24.48.193
	leftsubnet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.27.0.0/24
	leftnexthop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%defaultroute
	right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;193.112.154.165
	rightid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;193.112.154.165
	rightsubnet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.0.0/24
	rightnexthop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%defaultroute
	auto&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;启动ipsec&lt;/strong&gt;
**Tips：**修改连接配置auto=start，这样就不用每次重启ipsec后手动起连接了&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;systemctl start ipsec
ipsec auto --up cn-test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;安装初始化主机gz-a&#34;&gt;安装初始化（主机GZ-A）&lt;/h4&gt;
&lt;p&gt;**注意：**配置基本可以从CD-A照搬过来，不过由于我这里的环境是云端不同子网，所以连接的配置还需要做一些修改如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#cat /etc/ipsec.d/cn.conf&lt;/span&gt;
conn cn-test
	ike&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3des-sha1
	authby&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;secret
	phase2&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;esp
	phase2alg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3des-sha1
	compress&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;no
	pfs&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;yes
	type&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tunnel
	left&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;118.24.48.193
	leftid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;118.24.48.193
	leftsubnet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.27.0.0/24
	leftnexthop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%defaultroute
	right&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.0.10
	rightid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;193.112.154.165
	rightsubnet&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;172.16.0.0/24
	rightnexthop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;%defaultroute
	auto&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，两台IPsec server已经联通了，不过是CD-B和GZ-B无法和对端网络联通，并没有达到实验目的，很明显现在主要问题是路由&lt;/p&gt;
&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;
&lt;p&gt;Step0: 方便排错&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;route -n &lt;span style=&#34;color:#75715e&#34;&gt;#查看路由&lt;/span&gt;
ip rule ls &lt;span style=&#34;color:#75715e&#34;&gt;#查看路由优先级&lt;/span&gt;
ip route get 172.27.0.4 &lt;span style=&#34;color:#75715e&#34;&gt;#获取IP地址使用的路由&lt;/span&gt;
route add -net 10.0.60.0 netmask 255.255.255.0 gw 10.0.50.1 &lt;span style=&#34;color:#75715e&#34;&gt;#添加路由&lt;/span&gt;
route del -net 172.16.0.0 netmask 255.255.255.0 eth0 &lt;span style=&#34;color:#75715e&#34;&gt;#删除路由需要写完整&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#systemctl start firewalld&lt;/span&gt;
iptables -t nat -F &lt;span style=&#34;color:#75715e&#34;&gt;#清除防火墙nat规则&lt;/span&gt;
iptables -t nat -nvL &lt;span style=&#34;color:#75715e&#34;&gt;#查看防火墙nat规则&lt;/span&gt;
tcpdump -n -i eth0 dst 172.27.0.12 &lt;span style=&#34;color:#75715e&#34;&gt;#抓取eth0网卡上目标IP为12的包&lt;/span&gt;
tcpdump -n -i eth0 src 172.27.0.12 &lt;span style=&#34;color:#75715e&#34;&gt;#抓取eth0网卡上源IP为12的包&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step1：以CD-A为例，当前路由如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;root@VM_0_12_centos ipsec.d&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# route -n&lt;/span&gt;
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.27.0.1      0.0.0.0         UG    &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; eth0
169.254.0.0     0.0.0.0         255.255.0.0     U     &lt;span style=&#34;color:#ae81ff&#34;&gt;1002&lt;/span&gt;   &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; eth0
172.27.0.0      0.0.0.0         255.255.240.0   U     &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;        &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; eth0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step2: 在内网其他机器添加到VPN的路由&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#在CD-B添加到CD-A的路由&lt;/span&gt;
route add -net 172.16.0.0 netmask 255.255.255.0 gw 172.27.0.12
&lt;span style=&#34;color:#75715e&#34;&gt;#在GZ-B添加到GZ-A的路由&lt;/span&gt;
route add -net 172.27.0.0 netmask 255.255.255.0 gw 172.16.0.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Step3：在vpn网关机器上进行SNAT&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;iptables -t nat -A POSTROUTING -s 172.27.0.0/24 -d 172.16.0.0/24 -j SNAT --to 118.24.48.193
&lt;span style=&#34;color:#75715e&#34;&gt;#iptables -t nat -A POSTROUTING -s 172.27.0.0/24 -d 172.16.0.0/24 -j RETURN&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#iptables -t nat -A POSTROUTING -s 172.27.0.0/24 -o eth0 -j MASQUERADE&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;**最后说一下：**比较容易踩坑的是使用公有云，由于外网网卡并不是直接与内网实例关联的，说以需要其他的途径才可以实现，一般对应服务商都有解决方案，而且关于ipsec连接配置也跟这个有关，具体还需要看一下实际情况。&lt;/p&gt;
&lt;h3 id=&#34;参考链接&#34;&gt;参考链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xelerance/Openswan&#34;&gt;openswan github&lt;/a&gt;
&lt;a href=&#34;https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md&#34;&gt;ipsec vpn&lt;/a&gt;
&lt;a href=&#34;https://segmentfault.com/a/1190000006125737&#34;&gt;唐霜的vpn教程&lt;/a&gt;
&lt;a href=&#34;https://docs.ucloud.cn/software/vpn/ipsec&#34;&gt;ucloud教程&lt;/a&gt;&lt;/p&gt;</description>
      
    </item>
    
  </channel>
</rss>
