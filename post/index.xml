<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Gourds</title>
    <link>https://blog.gourds.site/post/</link>
    <description>Recent content in Posts on Gourds</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 19 Jul 2021 09:34:38 +0800</lastBuildDate><atom:link href="https://blog.gourds.site/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bitbucket 迁移缺失commit</title>
      <link>https://blog.gourds.site/post/problems/bitbucket_migration_error/</link>
      <pubDate>Mon, 19 Jul 2021 09:34:38 +0800</pubDate>
      
      <guid>https://blog.gourds.site/post/problems/bitbucket_migration_error/</guid>
      <description>概括： 迁移bitbucket后，发现部分分支commit缺失。 迁移过程： 对数据目录进行初次同步。使用命令/bin/rsync -auvP --delete -e &amp;quot;ssh -p 10022&amp;quot; /source/dir/ root@dest.host:/dest/dir/</description>
    </item>
    
    <item>
      <title>《The Road Less Traveled》</title>
      <link>https://blog.gourds.site/post/book/theroadlesstraveled/</link>
      <pubDate>Sat, 17 Jul 2021 21:41:19 +0800</pubDate>
      
      <guid>https://blog.gourds.site/post/book/theroadlesstraveled/</guid>
      <description>《少有人走的路：心智成熟之旅》 英文原版书名即 《The Road Less Traveled》。 感想： 还是比较推荐的。读这类书目的性还是很强的，年龄如果没有和心</description>
    </item>
    
    <item>
      <title>重读《三国演义》</title>
      <link>https://blog.gourds.site/post/book/%E9%87%8D%E8%AF%BB_%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89/</link>
      <pubDate>Wed, 14 Jul 2021 22:43:46 +0800</pubDate>
      
      <guid>https://blog.gourds.site/post/book/%E9%87%8D%E8%AF%BB_%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89/</guid>
      <description>&lt;p&gt;前些日子突然想看书，以前屯的书这时作用就显示出来了，书架上书很多，鬼使神差，拿了本三国演义。之前只看过老三国，就是鲍国安那部，遗憾四大名著没读过，刚好趁这个机会读一下，最近也快看完了，博客也打算恢复开始写了，简单记录下乱七八糟的想法。&lt;/p&gt;
&lt;p&gt;我现在所在的公司是做游戏的，主要是三国题材。之前关于三国有不少疑问，在读的过程中也有点豁然开朗的感觉了。&lt;/p&gt;
&lt;p&gt;纵观市面上三国题材的游戏，大多LOGO都是赵云，通过读的过程，确实是感觉三国里的人物，还是赵云形象好，没啥负面新闻，关羽傲，吕布骚（专干义父），张飞太糙，刘皇叔又太爱哭。&lt;/p&gt;
&lt;p&gt;另外也有疑问&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;卧龙凤雏得一人可安天下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉庞统被过誉了，可能是因为未建功而身先死。不过从读到的信息来看，死于落凤坡更多是因为心胸狭隘，他觉得孔明怕他建功，另一方面又没有对战局的清晰认识，所以送了人头。//好一匹白马，手动滑稽&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>《围城》</title>
      <link>https://blog.gourds.site/post/book/%E5%9B%B4%E5%9F%8E_%E6%9C%89%E6%84%9F/</link>
      <pubDate>Mon, 12 Jul 2021 23:08:22 +0800</pubDate>
      
      <guid>https://blog.gourds.site/post/book/%E5%9B%B4%E5%9F%8E_%E6%9C%89%E6%84%9F/</guid>
      <description>文人确实是心思细腻，表达能力好，名著毕竟是名著，钱老对人物描绘把握的入木三分。 方鸿渐，苏文执，唐小姐，还有孙柔嘉里面的人物都栩栩如生，就跟真</description>
    </item>
    
    <item>
      <title>关于对Python面向对象的理解</title>
      <link>https://blog.gourds.site/post/programming/%E5%85%B3%E4%BA%8E%E5%AF%B9python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 10 Sep 2019 20:38:24 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/programming/%E5%85%B3%E4%BA%8E%E5%AF%B9python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>&lt;p&gt;说起面向对象(Object Oriented Programming)首先想到的就是三个词：封装、继承和多态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;封装：&lt;/strong&gt; 目的是为了简化编程和提升安全性(标识出允许外部使用的所有成员函数和数据项)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;属性封装&lt;/li&gt;
&lt;li&gt;方法封装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;继承和多态：&lt;/strong&gt; 顾名思义，继承就是子类可以获取父类的特性，实际上就是为了更好的进行代码复用，而多态是指基于不同的父类调用同一方法也可能有不同的执行逻辑，与这个相关的还有一个有趣的名词”&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B&#34;&gt;鸭子模型&lt;/a&gt;“。&lt;/p&gt;
&lt;p&gt;另外与面向对象对应的还有个面向过程(Process Oriented)。其中的区别下面有一个通俗的解释，可以做一个参考&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面向对象是相对于面向过程的，比如你要充话费，你会想，可以下个支付宝，然后绑定银行卡，然后在淘宝上买卡，自己冲，这种种过程。但是对于你女朋友就不一样了，她是面向“对象”的，她会想，谁会充话费呢？当然是你了，她就给你电话，然后你把之前的做了一遍，然后她收到到帐的短信，说了句，亲爱的。这就是面向对象！女的思维大部分是面向“对象”的！她不关心处理的细节，只关心谁可以，和结果！&lt;/p&gt;
&lt;p&gt;来源：知乎 &lt;a href=&#34;https://www.zhihu.com/question/31021366/answer/50581592&#34;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>python中特殊方法和特殊变量总结</title>
      <link>https://blog.gourds.site/post/programming/python%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 01 Sep 2019 10:59:29 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/programming/python%E4%B8%AD%E7%89%B9%E6%AE%8A%E6%96%B9%E6%B3%95%E5%92%8C%E7%89%B9%E6%AE%8A%E5%8F%98%E9%87%8F%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;在研究一些python项目的源码时经常会看到一些特殊的方法和变量，比如两边双下划线&lt;code&gt;__init__&lt;/code&gt;定义的方法，还有一些类中会有以双下划线&lt;code&gt;__&lt;/code&gt;开头定义的变量，以及以单下划线&lt;code&gt;_&lt;/code&gt;开头的定义的变量。这里对目前经常遇到的做一个记录&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__method__&lt;/code&gt;:在class中有一些以双下划线开头和结尾的函数被称为特殊方法(Magic Method)，更具体可以参考&lt;a href=&#34;https://docs.python.org/3/reference/datamodel.html#special-method-names&#34;&gt; 官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;顺便说一下访问限制。如下（限制其实并不严格，主要靠自觉）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__&lt;/code&gt;:在类内部如果使用双下划线开头定义变量，那么这个变量就变成了私有变量（private），即这个变量只有在内部访问（并不是绝对控制，可以通过其他方法访问）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;:在类内部如果使用_开头定义变量，其实表示建议（表示可以从外部访问但最好不要访问）当成私有变量&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>JenkinsActiveChoices插件使用</title>
      <link>https://blog.gourds.site/post/cicd/jenkins%E7%9A%84activechoices%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 30 Aug 2019 08:30:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/cicd/jenkins%E7%9A%84activechoices%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;之前使用过Jenkins的&lt;a href=&#34;https://wiki.jenkins.io/display/JENKINS/Active+Choices+Plugin&#34;&gt;Active Choices Plugin&lt;/a&gt;插件，概述下当时我想实现的效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对自定义选项支持多选&lt;/li&gt;
&lt;li&gt;在Job中点击构建是默认全部选中&lt;/li&gt;
&lt;li&gt;采用DSL构建
所以当时调研后就选择了这个插件，使用起来还不错。不过今天又遇到一个问题，记录一下&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Flask中Jinja2模板使用总结</title>
      <link>https://blog.gourds.site/post/programming/flask%E4%B8%ADjinja2%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Wed, 28 Aug 2019 21:00:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/programming/flask%E4%B8%ADjinja2%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;之前&lt;a href=&#34;&#34;&gt;已经总结过Jinja2&lt;/a&gt;了,这里主要总结在Falsk中的一些东西。包括以下方面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模板的目录结构设计&lt;/li&gt;
&lt;li&gt;常用的模块&lt;/li&gt;
&lt;li&gt;HTML转义&lt;/li&gt;
&lt;li&gt;特殊装饰器&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Jinja2语法</title>
      <link>https://blog.gourds.site/post/cicd/jinja2%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 25 Aug 2019 21:00:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/cicd/jinja2%E8%AF%AD%E6%B3%95/</guid>
      <description>&lt;h4 id=&#34;介绍&#34;&gt;介绍&lt;/h4&gt;
&lt;p&gt;大概介绍一下，主要介绍模板（模板仅仅是文本文件。它可以生成任何基于文本的格式（HTML、XML、CSV、LaTex 等等）。它并没有特定的扩展名，&lt;code&gt;.html&lt;/code&gt;或&lt;code&gt;.xml&lt;/code&gt;都是可以的。）模板包含变量或表达式 ，这两者在模板求值的时候会被替换为值。模板中 还有标签，控制模板的逻辑。模板语法的大量灵感来自于 Django和Python。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jinja2是一个现代的，设计者友好的，仿照Django模板的Python模板语言。它速度快，被广泛使用，并且提供了可选的沙箱模板执行环境保证安全.特征如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;沙箱中执行&lt;/li&gt;
&lt;li&gt;强大的HTML自动转义系统保护系统免受XSS&lt;/li&gt;
&lt;li&gt;模板继承&lt;/li&gt;
&lt;li&gt;及时编译最优的python代码&lt;/li&gt;
&lt;li&gt;易于调试。异常的行数直接指向模板中的对应行&lt;/li&gt;
&lt;li&gt;可配置的语法&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;mdash;选自 &lt;a href=&#34;http://docs.jinkan.org/docs/jinja2/index.html&#34;&gt;http://docs.jinkan.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>关于Cookie和Session以及Token的说明</title>
      <link>https://blog.gourds.site/post/network/%E5%85%B3%E4%BA%8Ecookie%E5%92%8Csession%E4%BB%A5%E5%8F%8Atoken%E7%9A%84%E8%AF%B4%E6%98%8E/</link>
      <pubDate>Sun, 25 Aug 2019 12:00:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/network/%E5%85%B3%E4%BA%8Ecookie%E5%92%8Csession%E4%BB%A5%E5%8F%8Atoken%E7%9A%84%E8%AF%B4%E6%98%8E/</guid>
      <description>&lt;p&gt;现在做web的话就绕不开安全认证这一步，那就先介绍下目前常见的认证方式然后再说关于cookie、session、token的东西。常用的认证方式简单概述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cookie-session认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;出现较早的认证方式，主要形式是浏览器客户端将用户名密码发送给服务器，服务器验证后创建session并发放用于识别用户的sessionID（与用户状态绑定后记录在服务器端），这个sessionID以及一些相关的其他信息就是cookie，cookie随着响应(Set-Cookie)返回给客户端由客户端存储于浏览器，之后客户端的请求都会带上这个cookie，服务端通过cookie来获取Session信息从而进行认证校验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Oauth认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Oauth是一种授权机制，主要为第三方应用颁发授权令牌（token）,目前有Oauth2.0和Oauth1.0版本，其中Oauth2.0版本的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6749.html&#34;&gt;RFC6749&lt;/a&gt;，Oauth1.0版本的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5849&#34;&gt;RFC5849&lt;/a&gt;。Oauth2.0的具体介绍可以参考&lt;a href=&#34;http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html&#34;&gt;阮一峰|Oauth2.0&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;JWT认证方式&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;JWT的标准是&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc7519.html&#34;&gt;RFC7519&lt;/a&gt;。大概原理是客户端经过服务器认证后服务器给客户端返回一个json对象（包含用户信息且加密处理的数据），之后客户端与服务器通信都会带上这个json对象，服务器只通过这个对象来认证用户，也就是说服务器端是无状态的不会保存状态数据了（比如session）。具体可参考&lt;a href=&#34;http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html&#34;&gt;阮一峰|JSON Web Token 入门教程&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Aws使用EMR对Dynamodb进行备份还原</title>
      <link>https://blog.gourds.site/post/cloud/aws%E4%BD%BF%E7%94%A8emr%E5%AF%B9dynamodb%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</link>
      <pubDate>Wed, 21 Aug 2019 13:38:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/cloud/aws%E4%BD%BF%E7%94%A8emr%E5%AF%B9dynamodb%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD%E8%BF%98%E5%8E%9F/</guid>
      <description>&lt;p&gt;最近需要对DynamoDB的数据进行迁移，由于现阶段将Dynamo的容量模式由&lt;code&gt;AutoScaling&lt;/code&gt;修改成了&lt;code&gt;按需&lt;/code&gt;，当使用之前的HIVE脚本时出现了&lt;code&gt;Read throughput should not be less than 1&lt;/code&gt;的报错，报错跟DynamoDB的容量有关，继而准备用Ansible在执行脚本前将Dynamo的容量和模式进行调整，又发现了Ansible的Dynamo模块现阶段还没有支持&lt;code&gt;On-Demand billing&lt;/code&gt;这个功能，接着又准备使用&lt;code&gt;awscli&lt;/code&gt;命令行进行调整，经调研这个应该是可以对Dynamo进行调整的，文章后面有一些资料可以参考，现在由于AWS官方给出了回复，所以就不用搞这个了，直接升级版本就好了，更省事。关于版本问题可以看下面说的&lt;code&gt;版本问题说明&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker方式下Bitbucket及confluence和jira的迁移</title>
      <link>https://blog.gourds.site/post/docker/docker%E6%96%B9%E5%BC%8F%E4%B8%8Bbitbucket%E5%8F%8Aconfluence%E5%92%8Cjira%E8%BF%81%E7%A7%BB%E6%96%87%E6%A1%A3/</link>
      <pubDate>Thu, 29 Nov 2018 13:57:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/docker/docker%E6%96%B9%E5%BC%8F%E4%B8%8Bbitbucket%E5%8F%8Aconfluence%E5%92%8Cjira%E8%BF%81%E7%A7%BB%E6%96%87%E6%A1%A3/</guid>
      <description>&lt;p&gt;之前写过使用Docker部署Confluence、Jira、Bitbucket的文档，由于宿主服务器硬件有点跟不上了，所以前端时间进行了这些服务的迁移。这里先介绍Confluence及Jira的迁移过程。简单介绍下做的事情
&lt;strong&gt;迁移思路：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;按照原来搭建方法在新宿主机上新建相同的容器（注意控制版本，可以用指定的版本来替代image的latest标签）&lt;/li&gt;
&lt;li&gt;将备份的数据导入新的容器中&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这里面最容易出问题的就是备份数据是否是完全完整的，比如Jira的附件及插件、Bitbucket代码是可以导入等，当然许多官方会有相关的提示，不过并没有提供更详尽的解决过程，这里算一个补充吧。
PS：Atlassian的这几个服务都是有自动备份功能的，所以也不需要过多干涉，后面的还原数据操作，Jira和Confluence都是用的应用自己的备份，备份路径也是官方Docker的路径（这个就根据实际情况拿到备份就行了）。还有本来想贴几个图可能会更直观，不过七牛的图床域名被回收了，之后应该会用&lt;a href=&#34;https://github.com/Chevereto/Chevereto-Free&#34;&gt;【chevreto】&lt;/a&gt;，有时间了整一整。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Docker方式安装Jumpserver</title>
      <link>https://blog.gourds.site/post/docker/docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85jumpserver/</link>
      <pubDate>Tue, 27 Nov 2018 15:00:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/docker/docker%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85jumpserver/</guid>
      <description>&lt;p&gt;之前有自己手动封装过Jumpserver的Docker镜像，既然官方发布的有Docker那就使用官方的。不过官方的是DockerAllinone模式，推荐使用外置DB及Reids。所以这里就再弄一个用。如官方所述需要注意Mysql的编码问题，另外还有一个关于Docker的volume小瑕疵，其他的就没有什么问题了。官方链接放在最后需要的自取，另外以下代码在我的&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/jumpserver&#34;&gt;【github】&lt;/a&gt;上都有。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>博客迁移至阿里云</title>
      <link>https://blog.gourds.site/post/blog/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91/</link>
      <pubDate>Tue, 30 Oct 2018 18:23:45 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/blog/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
      <description>&lt;p&gt;之前博客使用的是搬瓦工的机器，感觉访问速度受限，刚好阿里云有活动，就决定迁移到阿里。鉴于之前一直没有一个好用的评论系统，迁移到阿里后进行了备案，开始使用畅言评论系统。
另外考虑到备份问题，也对部署方式进行了更新。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS7安装配置supervisor</title>
      <link>https://blog.gourds.site/post/linux/centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEsupervisor/</link>
      <pubDate>Thu, 30 Aug 2018 21:12:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/linux/centos7%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AEsupervisor/</guid>
      <description>&lt;p&gt;之前一直用AWS的服务，使用的也是AWS官方提供的系统镜像，感觉挺好使的，所以centos7的版本用的不多。最近刚好需要使用腾讯云，记录一下supervisor的安装配置，不管简单与否，好久没写博客了还是记录一下吧。
&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/12/20010101-emoticon-27.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Elasticsearch使用curator管理index</title>
      <link>https://blog.gourds.site/post/bigdata/es%E4%BD%BF%E7%94%A8curator%E7%AE%A1%E7%90%86index/</link>
      <pubDate>Wed, 01 Aug 2018 12:11:16 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/bigdata/es%E4%BD%BF%E7%94%A8curator%E7%AE%A1%E7%90%86index/</guid>
      <description>&lt;p&gt;有个管理ES index的需求，感觉使用curl调用HTTP接口很不方便也不是很科学。在Github上一查，果然有官方提供的工具&lt;code&gt;curator&lt;/code&gt;，这个工具不仅仅满足了我简单管理的需要（索引的关闭、打开、段合并、删除等），也为以后的扩展提供了新的解决方案（支持磁盘占用触发）,非常不错。以下记录我的调研测试过程。另外补充一句&lt;code&gt;curator&lt;/code&gt;的官方文档十分完备，如喜欢直接阅读官方文档可以直接跳到本文底部，那里有官方文档链接。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bitbucket实践</title>
      <link>https://blog.gourds.site/post/tools/bitbucket%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sat, 09 Jun 2018 12:38:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/tools/bitbucket%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;前言：之前使用了Atlassian公司的Confluence和Jira，现在新项目考虑使用Bitbucket做代码仓库，这里记录一下调研实践过程。由于之前的服务是使用docker进行部署的，所以Bitbucket也决定使用docker的方式进行部署。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;update:&lt;/strong&gt;
2018-06-12: 添加备份还原文档，文档在&lt;a href=&#34;https://github.com/Gourds/docker-image/tree/master/Service/bitbucket/backup-restore&#34;&gt;【这里】&lt;/a&gt;，就不单独在放Blog了&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Etcd的v3版本常用操作及可视化</title>
      <link>https://blog.gourds.site/post/distribution/etcd%E7%9A%84v3%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Tue, 24 Apr 2018 17:00:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/distribution/etcd%E7%9A%84v3%E7%89%88%E6%9C%AC%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%8F%8A%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;简单记录一下&lt;code&gt;Etcd API v3&lt;/code&gt;版本的基本操作和可视化&lt;code&gt;WEB UI&lt;/code&gt;使用，关于V2的使用可以看我之前的一篇介绍&lt;a href=&#34;http://arvon.top/tags/%E8%BF%90%E7%BB%B4%E6%9E%B6%E6%9E%84/&#34;&gt;【etcd v2】&lt;/a&gt;。Etcd v2 和 v3 本质上是共享同一套 raft 协议代码的两个独立的应用，接口不一样，存储不一样，数据也是互相隔离的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;V3相对V2的一些主要变化：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接口通过grpc提供rpc接口，放弃了v2的http接口。优势是长连接效率提升明显，缺点是使用不如以前方便，尤其对不方便维护长连接的场景。&lt;/li&gt;
&lt;li&gt;废弃了原来的目录结构，变成了纯粹的kv，用户可以通过前缀匹配模式模拟目录&lt;/li&gt;
&lt;li&gt;内存中不再保存value，同样的内存可以支持存储更多的key&lt;/li&gt;
&lt;li&gt;watch机制更稳定，基本上可以通过watch机制实现数据的完全同步&lt;/li&gt;
&lt;li&gt;提供了批量操作以及事务机制，用户可以通过批量事务请求来实现Etcd v2的CAS机制（批量事务支持if条件判断）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&amp;ndash;以上摘自王渊命的文章[侵删]&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Gitlab迁移升级记录</title>
      <link>https://blog.gourds.site/post/linux/gitlab%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 21 Apr 2018 19:33:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/linux/gitlab%E8%BF%81%E7%A7%BB%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;之前写了gitlab的安装文档，目的是为了为迁移做准备，现在记录一下测试迁移的过程。现在需要将编译安装的&lt;code&gt;7.13.4&lt;/code&gt;版本的gitlab升级至&lt;code&gt;10.6.0&lt;/code&gt;并采用docker的方式运行。经查阅官方Docker&lt;a href=&#34;https://hub.docker.com/r/gitlab/gitlab-ce/tags/&#34;&gt;【版本】&lt;/a&gt;是&lt;code&gt;9.5.1-10.7.0&lt;/code&gt;。而在Github上&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab&#34;&gt;【sameersbn版本】&lt;/a&gt;是&lt;code&gt;v6.1-v10.6.4&lt;/code&gt;。另外
还有Gitlab的&lt;a href=&#34;https://gitlab.com/gitlab-org/gitlab-ce/tree/master/doc/update&#34;&gt;【官方升级说明】&lt;/a&gt;,这个说明里面都是临近的版本升级说明，但并没有介绍大跨度升级的详细内容。最后决定采用github上提供的升级建议。记录说明如下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gitlab搭建使用记录</title>
      <link>https://blog.gourds.site/post/linux/gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Sat, 14 Apr 2018 20:54:00 +0000</pubDate>
      
      <guid>https://blog.gourds.site/post/linux/gitlab%E6%90%AD%E5%BB%BA%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
      <description>&lt;p&gt;Gitlab有迁移升级的打算，尝试下新版本（10.6.4)顺带记录一下过程。我这里尝试两种安装方法，一种是Omnibus包安装（官方推荐），另一种会尝试Docker。
操作之前看一把架构图,图片来自官方,侵删
&lt;img src=&#34;http://img.arvon.top:80/images/2019/08/12/20180413-gitlab-1.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
